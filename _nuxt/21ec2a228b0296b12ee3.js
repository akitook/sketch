(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{157:function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r,o,l=n(162),c=n(175);function h(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}Object.assign(h.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(s){return this.x+=s,this.y+=s,this.z+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this},addScaledVector:function(t,s){return this.x+=t.x*s,this.y+=t.y*s,this.z+=t.z*s,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(s){return this.x-=s,this.y-=s,this.z-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this},applyEuler:(o=new c.a,function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(o.setFromEuler(t))}),applyAxisAngle:function(){var t=new c.a;return function(e,n){return this.applyQuaternion(t.setFromAxisAngle(e,n))}}(),applyMatrix3:function(t){var e=this.x,n=this.y,r=this.z,o=t.elements;return this.x=o[0]*e+o[3]*n+o[6]*r,this.y=o[1]*e+o[4]*n+o[7]*r,this.z=o[2]*e+o[5]*n+o[8]*r,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,o=t.elements,l=1/(o[3]*e+o[7]*n+o[11]*r+o[15]);return this.x=(o[0]*e+o[4]*n+o[8]*r+o[12])*l,this.y=(o[1]*e+o[5]*n+o[9]*r+o[13])*l,this.z=(o[2]*e+o[6]*n+o[10]*r+o[14])*l,this},applyQuaternion:function(q){var t=this.x,e=this.y,n=this.z,r=q.x,o=q.y,l=q.z,c=q.w,h=c*t+o*n-l*e,d=c*e+l*t-r*n,f=c*n+r*e-o*t,m=-r*t-o*e-l*n;return this.x=h*c+m*-r+d*-l-f*-o,this.y=d*c+m*-o+f*-r-h*-l,this.z=f*c+m*-l+h*-o-d*-r,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)},transformDirection:function(t){var e=this.x,n=this.y,r=this.z,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*r,this.y=o[1]*e+o[5]*n+o[9]*r,this.z=o[2]*e+o[6]*n+o[10]*r,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(a,b){var t=a.x,e=a.y,n=a.z,r=b.x,o=b.y,l=b.z;return this.x=e*l-n*o,this.y=n*r-t*l,this.z=t*o-e*r,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:(r=new h,function(t){return r.copy(this).projectOnVector(t),this.sub(r)}),reflect:function(){var t=new h;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(l.a.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta)},setFromSphericalCoords:function(t,e,n){var r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}})},158:function(t,e,n){"use strict";n.d(e,"pb",function(){return r}),n.d(e,"r",function(){return o}),n.d(e,"p",function(){return l}),n.d(e,"q",function(){return c}),n.d(e,"nb",function(){return h}),n.d(e,"ob",function(){return d}),n.d(e,"D",function(){return f}),n.d(e,"g",function(){return m}),n.d(e,"v",function(){return v}),n.d(e,"B",function(){return _}),n.d(e,"db",function(){return x}),n.d(e,"cb",function(){return y}),n.d(e,"fb",function(){return M}),n.d(e,"d",function(){return E}),n.d(e,"ec",function(){return w}),n.d(e,"W",function(){return T}),n.d(e,"s",function(){return S}),n.d(e,"b",function(){return L}),n.d(e,"dc",function(){return A}),n.d(e,"Xb",function(){return R}),n.d(e,"T",function(){return P}),n.d(e,"S",function(){return C}),n.d(e,"sc",function(){return D}),n.d(e,"ib",function(){return N}),n.d(e,"cc",function(){return U}),n.d(e,"mb",function(){return I}),n.d(e,"ac",function(){return F}),n.d(e,"lb",function(){return z}),n.d(e,"w",function(){return O}),n.d(e,"jb",function(){return B}),n.d(e,"x",function(){return G}),n.d(e,"kb",function(){return V}),n.d(e,"bc",function(){return H}),n.d(e,"bb",function(){return k}),n.d(e,"f",function(){return W}),n.d(e,"J",function(){return X}),n.d(e,"K",function(){return j}),n.d(e,"y",function(){return Y}),n.d(e,"G",function(){return Z}),n.d(e,"F",function(){return J}),n.d(e,"gb",function(){return Q}),n.d(e,"X",function(){return K}),n.d(e,"V",function(){return $}),n.d(e,"c",function(){return tt}),n.d(e,"eb",function(){return et}),n.d(e,"P",function(){return nt}),n.d(e,"Vb",function(){return it}),n.d(e,"kc",function(){return at}),n.d(e,"j",function(){return ot}),n.d(e,"a",function(){return st}),n.d(e,"jc",function(){return lt}),n.d(e,"l",function(){return ct}),n.d(e,"m",function(){return ut}),n.d(e,"z",function(){return ht}),n.d(e,"A",function(){return ft}),n.d(e,"Zb",function(){return pt}),n.d(e,"n",function(){return mt}),n.d(e,"o",function(){return gt}),n.d(e,"Wb",function(){return vt}),n.d(e,"k",function(){return _t}),n.d(e,"U",function(){return xt}),n.d(e,"Y",function(){return yt}),n.d(e,"ab",function(){return bt}),n.d(e,"Z",function(){return Mt}),n.d(e,"M",function(){return Et}),n.d(e,"O",function(){return wt}),n.d(e,"N",function(){return Tt}),n.d(e,"lc",function(){return St}),n.d(e,"i",function(){return Lt}),n.d(e,"Yb",function(){return At}),n.d(e,"rc",function(){return Rt}),n.d(e,"I",function(){return Pt}),n.d(e,"nc",function(){return Ct}),n.d(e,"C",function(){return Dt}),n.d(e,"H",function(){return Nt}),n.d(e,"oc",function(){return Ut}),n.d(e,"pc",function(){return It}),n.d(e,"qc",function(){return Ft}),n.d(e,"mc",function(){return zt}),n.d(e,"e",function(){return Ot}),n.d(e,"Nb",function(){return Bt}),n.d(e,"rb",function(){return Gt}),n.d(e,"R",function(){return Vt}),n.d(e,"Q",function(){return Ht}),n.d(e,"t",function(){return kt}),n.d(e,"u",function(){return Wt}),n.d(e,"Ub",function(){return Xt}),n.d(e,"Tb",function(){return jt}),n.d(e,"Ib",function(){return Yt}),n.d(e,"Jb",function(){return qt}),n.d(e,"Kb",function(){return Zt}),n.d(e,"Sb",function(){return Jt}),n.d(e,"Rb",function(){return Qt}),n.d(e,"Hb",function(){return Kt}),n.d(e,"Gb",function(){return $t}),n.d(e,"Qb",function(){return te}),n.d(e,"yb",function(){return ee}),n.d(e,"zb",function(){return ne}),n.d(e,"Ab",function(){return ie}),n.d(e,"Bb",function(){return re}),n.d(e,"Cb",function(){return ae}),n.d(e,"Db",function(){return oe}),n.d(e,"Eb",function(){return se}),n.d(e,"Fb",function(){return le}),n.d(e,"tb",function(){return ce}),n.d(e,"ub",function(){return ue}),n.d(e,"vb",function(){return he}),n.d(e,"sb",function(){return de}),n.d(e,"wb",function(){return fe}),n.d(e,"xb",function(){return pe}),n.d(e,"ic",function(){return me}),n.d(e,"hc",function(){return ge}),n.d(e,"gc",function(){return ve}),n.d(e,"L",function(){return _e}),n.d(e,"tc",function(){return xe}),n.d(e,"E",function(){return ye}),n.d(e,"Mb",function(){return be}),n.d(e,"Pb",function(){return Me}),n.d(e,"Ob",function(){return Ee}),n.d(e,"Lb",function(){return we}),n.d(e,"h",function(){return Te}),n.d(e,"qb",function(){return Se}),n.d(e,"fc",function(){return Le}),n.d(e,"hb",function(){return Ae});var r="105",o=0,l=1,c=2,h=1,d=2,f=0,m=1,v=2,_=1,x=0,y=0,M=1,E=2,w=3,T=4,S=5,L=100,A=101,R=102,P=103,C=104,D=200,N=201,U=202,I=203,F=204,z=205,O=206,B=207,G=208,V=209,H=210,k=0,W=1,X=2,j=3,Y=4,Z=5,J=6,Q=7,K=0,$=1,tt=2,et=0,nt=1,it=2,at=3,ot=4,st=5,lt=300,ct=301,ut=302,ht=303,ft=304,pt=305,mt=306,gt=307,vt=1e3,_t=1001,xt=1002,yt=1003,bt=1004,Mt=1005,Et=1006,wt=1007,Tt=1008,St=1009,Lt=1010,At=1011,Rt=1012,Pt=1013,Ct=1014,Dt=1015,Nt=1016,Ut=1017,It=1018,Ft=1019,zt=1020,Ot=1021,Bt=1022,Gt=1023,Vt=1024,Ht=1025,kt=1026,Wt=1027,Xt=1028,jt=33776,Yt=33777,qt=33778,Zt=33779,Jt=35840,Qt=35841,Kt=35842,$t=35843,te=36196,ee=37808,ne=37809,ie=37810,re=37811,ae=37812,oe=37813,se=37814,le=37815,ce=37816,ue=37817,he=37818,de=37819,fe=37820,pe=37821,me=0,ge=1,ve=2,_e=3e3,xe=3001,ye=3007,be=3002,Me=3004,Ee=3005,we=3006,Te=3200,Se=3201,Le=0,Ae=1},159:function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.d(e,"a",function(){return r})},160:function(t,e,n){"use strict";function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}n.d(e,"a",function(){return o})},161:function(t,e,n){"use strict";function r(t,e){this.x=t||0,this.y=e||0}n.d(e,"a",function(){return r}),Object.defineProperties(r.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(r.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(s){return this.x+=s,this.y+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this},addScaledVector:function(t,s){return this.x+=t.x*s,this.y+=t.y*s,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(s){return this.x-=s,this.y-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),s=Math.sin(e),r=this.x-t.x,o=this.y-t.y;return this.x=r*n-o*s+t.x,this.y=r*s+o*n+t.y,this}})},162:function(t,e,n){"use strict";n.d(e,"a",function(){return r});var r={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],i=0;i<256;i++)t[i]=(i<16?"0":"")+i.toString(16);return function(){var e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0,o=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&n]+t[n>>8&255]+"-"+t[n>>16&15|64]+t[n>>24&255]+"-"+t[63&r|128]+t[r>>8&255]+"-"+t[r>>16&255]+t[r>>24&255]+t[255&o]+t[o>>8&255]+t[o>>16&255]+t[o>>24&255]).toUpperCase()}}(),clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,r,o){return r+(t-e)*(o-r)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*r.DEG2RAD},radToDeg:function(t){return t*r.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}}},163:function(t,e,n){"use strict";n.d(e,"a",function(){return _});var r,o,l,c,h,d,f,m,v=n(157);function _(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(_.prototype,{isMatrix4:!0,set:function(t,e,n,r,o,l,c,h,d,f,m,v,_,x,y,M){var E=this.elements;return E[0]=t,E[4]=e,E[8]=n,E[12]=r,E[1]=o,E[5]=l,E[9]=c,E[13]=h,E[2]=d,E[6]=f,E[10]=m,E[14]=v,E[3]=_,E[7]=x,E[11]=y,E[15]=M,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new _).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:(m=new v.a,function(t){var e=this.elements,n=t.elements,r=1/m.setFromMatrixColumn(t,0).length(),o=1/m.setFromMatrixColumn(t,1).length(),l=1/m.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*o,e[5]=n[5]*o,e[6]=n[6]*o,e[7]=0,e[8]=n[8]*l,e[9]=n[9]*l,e[10]=n[10]*l,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}),makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,r=t.y,o=t.z,a=Math.cos(n),b=Math.sin(n),l=Math.cos(r),c=Math.sin(r),h=Math.cos(o),d=Math.sin(o);if("XYZ"===t.order){var f=a*h,m=a*d,v=b*h,_=b*d;e[0]=l*h,e[4]=-l*d,e[8]=c,e[1]=m+v*c,e[5]=f-_*c,e[9]=-b*l,e[2]=_-f*c,e[6]=v+m*c,e[10]=a*l}else if("YXZ"===t.order){var x=l*h,y=l*d,M=c*h,E=c*d;e[0]=x+E*b,e[4]=M*b-y,e[8]=a*c,e[1]=a*d,e[5]=a*h,e[9]=-b,e[2]=y*b-M,e[6]=E+x*b,e[10]=a*l}else if("ZXY"===t.order){x=l*h,y=l*d,M=c*h,E=c*d;e[0]=x-E*b,e[4]=-a*d,e[8]=M+y*b,e[1]=y+M*b,e[5]=a*h,e[9]=E-x*b,e[2]=-a*c,e[6]=b,e[10]=a*l}else if("ZYX"===t.order){f=a*h,m=a*d,v=b*h,_=b*d;e[0]=l*h,e[4]=v*c-m,e[8]=f*c+_,e[1]=l*d,e[5]=_*c+f,e[9]=m*c-v,e[2]=-c,e[6]=b*l,e[10]=a*l}else if("YZX"===t.order){var w=a*l,T=a*c,S=b*l,L=b*c;e[0]=l*h,e[4]=L-w*d,e[8]=S*d+T,e[1]=d,e[5]=a*h,e[9]=-b*h,e[2]=-c*h,e[6]=T*d+S,e[10]=w-L*d}else if("XZY"===t.order){w=a*l,T=a*c,S=b*l,L=b*c;e[0]=l*h,e[4]=-d,e[8]=c*h,e[1]=w*d+L,e[5]=a*h,e[9]=T*d-S,e[2]=S*d-T,e[6]=b*h,e[10]=L*d+w}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:(d=new v.a(0,0,0),f=new v.a(1,1,1),function(q){return this.compose(d,q,f)}),lookAt:(l=new v.a,c=new v.a,h=new v.a,function(t,e,n){var r=this.elements;return h.subVectors(t,e),0===h.lengthSq()&&(h.z=1),h.normalize(),l.crossVectors(n,h),0===l.lengthSq()&&(1===Math.abs(n.z)?h.x+=1e-4:h.z+=1e-4,h.normalize(),l.crossVectors(n,h)),l.normalize(),c.crossVectors(h,l),r[0]=l.x,r[4]=c.x,r[8]=h.x,r[1]=l.y,r[5]=c.y,r[9]=h.y,r[2]=l.z,r[6]=c.z,r[10]=h.z,this}),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(a,b){var t=a.elements,e=b.elements,n=this.elements,r=t[0],o=t[4],l=t[8],c=t[12],h=t[1],d=t[5],f=t[9],m=t[13],v=t[2],_=t[6],x=t[10],y=t[14],M=t[3],E=t[7],w=t[11],T=t[15],S=e[0],L=e[4],A=e[8],R=e[12],P=e[1],C=e[5],D=e[9],N=e[13],U=e[2],I=e[6],F=e[10],z=e[14],O=e[3],B=e[7],G=e[11],V=e[15];return n[0]=r*S+o*P+l*U+c*O,n[4]=r*L+o*C+l*I+c*B,n[8]=r*A+o*D+l*F+c*G,n[12]=r*R+o*N+l*z+c*V,n[1]=h*S+d*P+f*U+m*O,n[5]=h*L+d*C+f*I+m*B,n[9]=h*A+d*D+f*F+m*G,n[13]=h*R+d*N+f*z+m*V,n[2]=v*S+_*P+x*U+y*O,n[6]=v*L+_*C+x*I+y*B,n[10]=v*A+_*D+x*F+y*G,n[14]=v*R+_*N+x*z+y*V,n[3]=M*S+E*P+w*U+T*O,n[7]=M*L+E*C+w*I+T*B,n[11]=M*A+E*D+w*F+T*G,n[15]=M*R+E*N+w*z+T*V,this},multiplyScalar:function(s){var t=this.elements;return t[0]*=s,t[4]*=s,t[8]*=s,t[12]*=s,t[1]*=s,t[5]*=s,t[9]*=s,t[13]*=s,t[2]*=s,t[6]*=s,t[10]*=s,t[14]*=s,t[3]*=s,t[7]*=s,t[11]*=s,t[15]*=s,this},applyToBufferAttribute:function(){var t=new v.a;return function(e){for(var i=0,n=e.count;i<n;i++)t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.applyMatrix4(this),e.setXYZ(i,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],n=t[4],r=t[8],o=t[12],l=t[1],c=t[5],h=t[9],d=t[13],f=t[2],m=t[6],v=t[10],_=t[14];return t[3]*(+o*h*m-r*d*m-o*c*v+n*d*v+r*c*_-n*h*_)+t[7]*(+e*h*_-e*d*v+o*l*v-r*l*_+r*d*f-o*h*f)+t[11]*(+e*d*m-e*c*_-o*l*m+n*l*_+o*c*f-n*d*f)+t[15]*(-r*c*f-e*h*m+e*c*v+r*l*m-n*l*v+n*h*f)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t,e,n){var r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=n),this},getInverse:function(t,e){var n=this.elements,r=t.elements,o=r[0],l=r[1],c=r[2],h=r[3],d=r[4],f=r[5],m=r[6],v=r[7],_=r[8],x=r[9],y=r[10],M=r[11],E=r[12],w=r[13],T=r[14],S=r[15],L=x*T*v-w*y*v+w*m*M-f*T*M-x*m*S+f*y*S,A=E*y*v-_*T*v-E*m*M+d*T*M+_*m*S-d*y*S,R=_*w*v-E*x*v+E*f*M-d*w*M-_*f*S+d*x*S,P=E*x*m-_*w*m-E*f*y+d*w*y+_*f*T-d*x*T,C=o*L+l*A+c*R+h*P;if(0===C){var D="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(D);return console.warn(D),this.identity()}var N=1/C;return n[0]=L*N,n[1]=(w*y*h-x*T*h-w*c*M+l*T*M+x*c*S-l*y*S)*N,n[2]=(f*T*h-w*m*h+w*c*v-l*T*v-f*c*S+l*m*S)*N,n[3]=(x*m*h-f*y*h-x*c*v+l*y*v+f*c*M-l*m*M)*N,n[4]=A*N,n[5]=(_*T*h-E*y*h+E*c*M-o*T*M-_*c*S+o*y*S)*N,n[6]=(E*m*h-d*T*h-E*c*v+o*T*v+d*c*S-o*m*S)*N,n[7]=(d*y*h-_*m*h+_*c*v-o*y*v-d*c*M+o*m*M)*N,n[8]=R*N,n[9]=(E*x*h-_*w*h-E*l*M+o*w*M+_*l*S-o*x*S)*N,n[10]=(d*w*h-E*f*h+E*l*v-o*w*v-d*l*S+o*f*S)*N,n[11]=(_*f*h-d*x*h-_*l*v+o*x*v+d*l*M-o*f*M)*N,n[12]=P*N,n[13]=(_*w*c-E*x*c+E*l*y-o*w*y-_*l*T+o*x*T)*N,n[14]=(E*f*c-d*w*c-E*l*m+o*w*m+d*l*T-o*f*T)*N,n[15]=(d*x*c-_*f*c+_*l*m-o*x*m-d*l*y+o*f*y)*N,this},scale:function(t){var e=this.elements,n=t.x,r=t.y,o=t.z;return e[0]*=n,e[4]*=r,e[8]*=o,e[1]*=n,e[5]*=r,e[9]*=o,e[2]*=n,e[6]*=r,e[10]*=o,e[3]*=n,e[7]*=r,e[11]*=o,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,e,-s,0,0,s,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),s=Math.sin(t);return this.set(e,0,s,0,0,1,0,0,-s,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,0,s,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),s=Math.sin(e),r=1-n,o=t.x,l=t.y,c=t.z,h=r*o,d=r*l;return this.set(h*o+n,h*l-s*c,h*c+s*l,0,h*l+s*c,d*l+n,d*c-s*o,0,h*c-s*l,d*c+s*o,r*c*c+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){var r=this.elements,o=e._x,l=e._y,c=e._z,h=e._w,d=o+o,f=l+l,m=c+c,v=o*d,_=o*f,x=o*m,y=l*f,M=l*m,E=c*m,w=h*d,T=h*f,S=h*m,L=n.x,A=n.y,R=n.z;return r[0]=(1-(y+E))*L,r[1]=(_+S)*L,r[2]=(x-T)*L,r[3]=0,r[4]=(_-S)*A,r[5]=(1-(v+E))*A,r[6]=(M+w)*A,r[7]=0,r[8]=(x+T)*R,r[9]=(M-w)*R,r[10]=(1-(v+y))*R,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},decompose:(r=new v.a,o=new _,function(t,e,n){var l=this.elements,c=r.set(l[0],l[1],l[2]).length(),h=r.set(l[4],l[5],l[6]).length(),d=r.set(l[8],l[9],l[10]).length();this.determinant()<0&&(c=-c),t.x=l[12],t.y=l[13],t.z=l[14],o.copy(this);var f=1/c,m=1/h,v=1/d;return o.elements[0]*=f,o.elements[1]*=f,o.elements[2]*=f,o.elements[4]*=m,o.elements[5]*=m,o.elements[6]*=m,o.elements[8]*=v,o.elements[9]*=v,o.elements[10]*=v,e.setFromRotationMatrix(o),n.x=c,n.y=h,n.z=d,this}),makePerspective:function(t,e,n,r,o,l){void 0===l&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var c=this.elements,h=2*o/(e-t),d=2*o/(n-r),a=(e+t)/(e-t),b=(n+r)/(n-r),f=-(l+o)/(l-o),m=-2*l*o/(l-o);return c[0]=h,c[4]=0,c[8]=a,c[12]=0,c[1]=0,c[5]=d,c[9]=b,c[13]=0,c[2]=0,c[6]=0,c[10]=f,c[14]=m,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this},makeOrthographic:function(t,e,n,r,o,l){var c=this.elements,h=1/(e-t),d=1/(n-r),p=1/(l-o),f=(e+t)*h,m=(n+r)*d,v=(l+o)*p;return c[0]=2*h,c[4]=0,c[8]=0,c[12]=-f,c[1]=0,c[5]=2*d,c[9]=0,c[13]=-m,c[2]=0,c[6]=0,c[10]=-2*p,c[14]=-v,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<16;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}})},164:function(t,e,n){"use strict";var r=n(163),o=n(170),l=n(157);function c(){o.a.call(this),this.type="Camera",this.matrixWorldInverse=new r.a,this.projectionMatrix=new r.a,this.projectionMatrixInverse=new r.a}c.prototype=Object.assign(Object.create(o.a.prototype),{constructor:c,isCamera:!0,copy:function(source,t){return o.a.prototype.copy.call(this,source,t),this.matrixWorldInverse.copy(source.matrixWorldInverse),this.projectionMatrix.copy(source.projectionMatrix),this.projectionMatrixInverse.copy(source.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new l.a),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){o.a.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}});var h=n(162);function d(t,e,n,r){c.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}n.d(e,"a",function(){return d}),d.prototype=Object.assign(Object.create(c.prototype),{constructor:d,isPerspectiveCamera:!0,copy:function(source,t){return c.prototype.copy.call(this,source,t),this.fov=source.fov,this.zoom=source.zoom,this.near=source.near,this.far=source.far,this.focus=source.focus,this.aspect=source.aspect,this.view=null===source.view?null:Object.assign({},source.view),this.filmGauge=source.filmGauge,this.filmOffset=source.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*h.a.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*h.a.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*h.a.RAD2DEG*Math.atan(Math.tan(.5*h.a.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,r,o,l){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=o,this.view.height=l,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*h.a.DEG2RAD*this.fov)/this.zoom,n=2*e,r=this.aspect*n,o=-.5*r,view=this.view;if(null!==this.view&&this.view.enabled){var l=view.fullWidth,c=view.fullHeight;o+=view.offsetX*r/l,e-=view.offsetY*n/c,r*=view.width/l,n*=view.height/c}var d=this.filmOffset;0!==d&&(o+=t*d/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+r,e,e-n,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(meta){var data=o.a.prototype.toJSON.call(this,meta);return data.object.fov=this.fov,data.object.zoom=this.zoom,data.object.near=this.near,data.object.far=this.far,data.object.focus=this.focus,data.object.aspect=this.aspect,null!==this.view&&(data.object.view=Object.assign({},this.view)),data.object.filmGauge=this.filmGauge,data.object.filmOffset=this.filmOffset,data}})},165:function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r,o=n(157);function l(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.assign(l.prototype,{isMatrix3:!0,set:function(t,e,n,r,o,l,c,h,d){var f=this.elements;return f[0]=t,f[1]=r,f[2]=c,f[3]=e,f[4]=o,f[5]=h,f[6]=n,f[7]=l,f[8]=d,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:(r=new o.a,function(t){for(var i=0,e=t.count;i<e;i++)r.x=t.getX(i),r.y=t.getY(i),r.z=t.getZ(i),r.applyMatrix3(this),t.setXYZ(i,r.x,r.y,r.z);return t}),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(a,b){var t=a.elements,e=b.elements,n=this.elements,r=t[0],o=t[3],l=t[6],c=t[1],h=t[4],d=t[7],f=t[2],m=t[5],v=t[8],_=e[0],x=e[3],y=e[6],M=e[1],E=e[4],w=e[7],T=e[2],S=e[5],L=e[8];return n[0]=r*_+o*M+l*T,n[3]=r*x+o*E+l*S,n[6]=r*y+o*w+l*L,n[1]=c*_+h*M+d*T,n[4]=c*x+h*E+d*S,n[7]=c*y+h*w+d*L,n[2]=f*_+m*M+v*T,n[5]=f*x+m*E+v*S,n[8]=f*y+m*w+v*L,this},multiplyScalar:function(s){var t=this.elements;return t[0]*=s,t[3]*=s,t[6]*=s,t[1]*=s,t[4]*=s,t[7]*=s,t[2]*=s,t[5]*=s,t[8]*=s,this},determinant:function(){var t=this.elements,a=t[0],b=t[1],e=t[2],n=t[3],r=t[4],o=t[5],g=t[6],l=t[7],i=t[8];return a*r*i-a*o*l-b*n*i+b*o*g+e*n*l-e*r*g},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=t.elements,r=this.elements,o=n[0],l=n[1],c=n[2],h=n[3],d=n[4],f=n[5],m=n[6],v=n[7],_=n[8],x=_*d-f*v,y=f*m-_*h,M=v*h-d*m,E=o*x+l*y+c*M;if(0===E){var w="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(w);return console.warn(w),this.identity()}var T=1/E;return r[0]=x*T,r[1]=(c*v-_*l)*T,r[2]=(f*l-c*d)*T,r[3]=y*T,r[4]=(_*o-c*m)*T,r[5]=(c*h-f*o)*T,r[6]=M*T,r[7]=(l*m-v*o)*T,r[8]=(d*o-l*h)*T,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,r,o,l,c){var h=Math.cos(o),s=Math.sin(o);this.set(n*h,n*s,-n*(h*l+s*c)+l+t,-r*s,r*h,-r*(-s*l+h*c)+c+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),s=Math.sin(t),n=this.elements,r=n[0],o=n[3],l=n[6],c=n[1],h=n[4],d=n[7];return n[0]=e*r+s*c,n[3]=e*o+s*h,n[6]=e*l+s*d,n[1]=-s*r+e*c,n[4]=-s*o+e*h,n[7]=-s*l+e*d,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var i=0;i<9;i++)this.elements[i]=t[i+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}})},166:function(t,e,n){"use strict";n.d(e,"a",function(){return d});var r,o,l,c=n(162),h={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function d(t,g,b){return void 0===g&&void 0===b?this.set(t):this.setRGB(t,g,b)}Object.assign(d.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,g,b){return this.r=t,this.g=g,this.b=b,this},setHSL:function(){function t(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+6*(q-p)*(2/3-t):p}return function(e,s,n){if(e=c.a.euclideanModulo(e,1),s=c.a.clamp(s,0,1),n=c.a.clamp(n,0,1),0===s)this.r=this.g=this.b=n;else{var p=n<=.5?n*(1+s):n+s-n*s,q=2*n-p;this.r=t(q,p,e+1/3),this.g=t(q,p,e),this.b=t(q,p,e-1/3)}return this}}(),setStyle:function(style){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}var e;if(e=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)){var n,r=e[1],o=e[2];switch(r){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,t(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,t(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)){var l=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return t(n[5]),this.setHSL(l,s,c)}}}else if(e=/^\#([A-Fa-f0-9]+)$/.exec(style)){var d,f=(d=e[1]).length;if(3===f)return this.r=parseInt(d.charAt(0)+d.charAt(0),16)/255,this.g=parseInt(d.charAt(1)+d.charAt(1),16)/255,this.b=parseInt(d.charAt(2)+d.charAt(2),16)/255,this;if(6===f)return this.r=parseInt(d.charAt(0)+d.charAt(1),16)/255,this.g=parseInt(d.charAt(2)+d.charAt(3),16)/255,this.b=parseInt(d.charAt(4)+d.charAt(5),16)/255,this}style&&style.length>0&&(void 0!==(d=h[style])?this.setHex(d):console.warn("THREE.Color: Unknown color "+style));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(){function t(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),copyLinearToSRGB:function(){function t(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}return function(e){return this.r=t(e.r),this.g=t(e.g),this.b=t(e.b),this}}(),convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,r=this.r,g=this.g,b=this.b,o=Math.max(r,g,b),l=Math.min(r,g,b),c=(l+o)/2;if(l===o)e=0,n=0;else{var h=o-l;switch(n=c<=.5?h/(o+l):h/(2-o-l),o){case r:e=(g-b)/h+(g<b?6:0);break;case g:e=(b-r)/h+2;break;case b:e=(r-g)/h+4}e/=6}return t.h=e,t.s=n,t.l=c,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:(l={},function(t,s,e){return this.getHSL(l),l.h+=t,l.s+=s,l.l+=e,this.setHSL(l.h,l.s,l.l),this}),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(s){return this.r+=s,this.g+=s,this.b+=s,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(s){return this.r*=s,this.g*=s,this.b*=s,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:(r={h:0,s:0,l:0},o={h:0,s:0,l:0},function(t,e){this.getHSL(r),t.getHSL(o);var n=c.a.lerp(r.h,o.h,e),s=c.a.lerp(r.s,o.s,e),l=c.a.lerp(r.l,o.l,e);return this.setHSL(n,s,l),this}),equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}})},167:function(t,e,n){"use strict";function r(t,e,n,r){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==r?r:1}var o,l;n.d(e,"a",function(){return r}),Object.assign(r.prototype,{isVector4:!0,set:function(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(s){return this.x+=s,this.y+=s,this.z+=s,this.w+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this},addScaledVector:function(t,s){return this.x+=t.x*s,this.y+=t.y*s,this.z+=t.z*s,this.w+=t.w*s,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(s){return this.x-=s,this.y-=s,this.z-=s,this.w-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,o=this.w,l=t.elements;return this.x=l[0]*e+l[4]*n+l[8]*r+l[12]*o,this.y=l[1]*e+l[5]*n+l[9]*r+l[13]*o,this.z=l[2]*e+l[6]*n+l[10]*r+l[14]*o,this.w=l[3]*e+l[7]*n+l[11]*r+l[15]*o,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(q){this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);return s<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s),this},setAxisAngleFromRotationMatrix:function(t){var e,n,r,o,l=t.elements,c=l[0],h=l[4],d=l[8],f=l[1],m=l[5],v=l[9],_=l[2],x=l[6],y=l[10];if(Math.abs(h-f)<.01&&Math.abs(d-_)<.01&&Math.abs(v-x)<.01){if(Math.abs(h+f)<.1&&Math.abs(d+_)<.1&&Math.abs(v+x)<.1&&Math.abs(c+m+y-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var M=(c+1)/2,E=(m+1)/2,w=(y+1)/2,T=(h+f)/4,S=(d+_)/4,L=(v+x)/4;return M>E&&M>w?M<.01?(n=0,r=.707106781,o=.707106781):(r=T/(n=Math.sqrt(M)),o=S/n):E>w?E<.01?(n=.707106781,r=0,o=.707106781):(n=T/(r=Math.sqrt(E)),o=L/r):w<.01?(n=.707106781,r=.707106781,o=0):(n=S/(o=Math.sqrt(w)),r=L/o),this.set(n,r,o,e),this}var s=Math.sqrt((x-v)*(x-v)+(d-_)*(d-_)+(f-h)*(f-h));return Math.abs(s)<.001&&(s=1),this.x=(x-v)/s,this.y=(d-_)/s,this.z=(f-h)/s,this.w=Math.acos((c+m+y-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(t,e){return void 0===o&&(o=new r,l=new r),o.set(t,t,t,t),l.set(e,e,e,e),this.clamp(o,l)},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}})},168:function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r=n(171),o=n(158),l=n(162),c=0;function h(){Object.defineProperty(this,"id",{value:c++}),this.uuid=l.a.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=o.fb,this.side=o.D,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=o.db,this.opacity=1,this.transparent=!1,this.blendSrc=o.ac,this.blendDst=o.lb,this.blendEquation=o.b,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=o.K,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.userData={},this.needsUpdate=!0}h.prototype=Object.assign(Object.create(r.a.prototype),{constructor:h,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===o.B;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(meta){var t=void 0===meta||"string"==typeof meta;t&&(meta={textures:{},images:{}});var data={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function e(t){var e=[];for(var n in t){var data=t[n];delete data.metadata,e.push(data)}return e}if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),this.color&&this.color.isColor&&(data.color=this.color.getHex()),void 0!==this.roughness&&(data.roughness=this.roughness),void 0!==this.metalness&&(data.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(data.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(data.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(data.specular=this.specular.getHex()),void 0!==this.shininess&&(data.shininess=this.shininess),void 0!==this.clearCoat&&(data.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(data.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(data.map=this.map.toJSON(meta).uuid),this.matcap&&this.matcap.isTexture&&(data.matcap=this.matcap.toJSON(meta).uuid),this.alphaMap&&this.alphaMap.isTexture&&(data.alphaMap=this.alphaMap.toJSON(meta).uuid),this.lightMap&&this.lightMap.isTexture&&(data.lightMap=this.lightMap.toJSON(meta).uuid),this.aoMap&&this.aoMap.isTexture&&(data.aoMap=this.aoMap.toJSON(meta).uuid,data.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(data.bumpMap=this.bumpMap.toJSON(meta).uuid,data.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(data.normalMap=this.normalMap.toJSON(meta).uuid,data.normalMapType=this.normalMapType,data.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(data.displacementMap=this.displacementMap.toJSON(meta).uuid,data.displacementScale=this.displacementScale,data.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(data.roughnessMap=this.roughnessMap.toJSON(meta).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(data.metalnessMap=this.metalnessMap.toJSON(meta).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(data.emissiveMap=this.emissiveMap.toJSON(meta).uuid),this.specularMap&&this.specularMap.isTexture&&(data.specularMap=this.specularMap.toJSON(meta).uuid),this.envMap&&this.envMap.isTexture&&(data.envMap=this.envMap.toJSON(meta).uuid,data.reflectivity=this.reflectivity,void 0!==this.combine&&(data.combine=this.combine),void 0!==this.envMapIntensity&&(data.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(data.gradientMap=this.gradientMap.toJSON(meta).uuid),void 0!==this.size&&(data.size=this.size),void 0!==this.sizeAttenuation&&(data.sizeAttenuation=this.sizeAttenuation),this.blending!==o.fb&&(data.blending=this.blending),!0===this.flatShading&&(data.flatShading=this.flatShading),this.side!==o.D&&(data.side=this.side),this.vertexColors!==o.db&&(data.vertexColors=this.vertexColors),this.opacity<1&&(data.opacity=this.opacity),!0===this.transparent&&(data.transparent=this.transparent),data.depthFunc=this.depthFunc,data.depthTest=this.depthTest,data.depthWrite=this.depthWrite,0!==this.rotation&&(data.rotation=this.rotation),!0===this.polygonOffset&&(data.polygonOffset=!0),0!==this.polygonOffsetFactor&&(data.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(data.polygonOffsetUnits=this.polygonOffsetUnits),1!==this.linewidth&&(data.linewidth=this.linewidth),void 0!==this.dashSize&&(data.dashSize=this.dashSize),void 0!==this.gapSize&&(data.gapSize=this.gapSize),void 0!==this.scale&&(data.scale=this.scale),!0===this.dithering&&(data.dithering=!0),this.alphaTest>0&&(data.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(data.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(data.wireframe=this.wireframe),this.wireframeLinewidth>1&&(data.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(data.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(data.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(data.morphTargets=!0),!0===this.skinning&&(data.skinning=!0),!1===this.visible&&(data.visible=!1),"{}"!==JSON.stringify(this.userData)&&(data.userData=this.userData),t){var n=e(meta.textures),r=e(meta.images);n.length>0&&(data.textures=n),r.length>0&&(data.images=r)}return data},clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.name=source.name,this.fog=source.fog,this.lights=source.lights,this.blending=source.blending,this.side=source.side,this.flatShading=source.flatShading,this.vertexColors=source.vertexColors,this.opacity=source.opacity,this.transparent=source.transparent,this.blendSrc=source.blendSrc,this.blendDst=source.blendDst,this.blendEquation=source.blendEquation,this.blendSrcAlpha=source.blendSrcAlpha,this.blendDstAlpha=source.blendDstAlpha,this.blendEquationAlpha=source.blendEquationAlpha,this.depthFunc=source.depthFunc,this.depthTest=source.depthTest,this.depthWrite=source.depthWrite,this.colorWrite=source.colorWrite,this.precision=source.precision,this.polygonOffset=source.polygonOffset,this.polygonOffsetFactor=source.polygonOffsetFactor,this.polygonOffsetUnits=source.polygonOffsetUnits,this.dithering=source.dithering,this.alphaTest=source.alphaTest,this.premultipliedAlpha=source.premultipliedAlpha,this.visible=source.visible,this.userData=JSON.parse(JSON.stringify(source.userData)),this.clipShadows=source.clipShadows,this.clipIntersection=source.clipIntersection;var t=source.clippingPlanes,e=null;if(null!==t){var n=t.length;e=new Array(n);for(var i=0;i!==n;++i)e[i]=t[i].clone()}return this.clippingPlanes=e,this.shadowSide=source.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}})},169:function(t,e,n){"use strict";var r,o,l,c,h,d=n(157),f=n(161),m=n(176);function v(t,e){this.origin=void 0!==t?t:new d.a,this.direction=void 0!==e?e:new d.a}Object.assign(v.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new d.a),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:(h=new d.a,function(t){return this.origin.copy(this.at(t,h)),this}),closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new d.a),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new d.a;return function(e){var n=t.subVectors(e,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(n).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:(o=new d.a,l=new d.a,c=new d.a,function(t,e,n,r){o.copy(t).add(e).multiplyScalar(.5),l.copy(e).sub(t).normalize(),c.copy(this.origin).sub(o);var h,d,f,m,v=.5*t.distanceTo(e),_=-this.direction.dot(l),x=c.dot(this.direction),y=-c.dot(l),M=c.lengthSq(),E=Math.abs(1-_*_);if(E>0)if(d=_*x-y,m=v*E,(h=_*y-x)>=0)if(d>=-m)if(d<=m){var w=1/E;f=(h*=w)*(h+_*(d*=w)+2*x)+d*(_*h+d+2*y)+M}else d=v,f=-(h=Math.max(0,-(_*d+x)))*h+d*(d+2*y)+M;else d=-v,f=-(h=Math.max(0,-(_*d+x)))*h+d*(d+2*y)+M;else d<=-m?f=-(h=Math.max(0,-(-_*v+x)))*h+(d=h>0?-v:Math.min(Math.max(-v,-y),v))*(d+2*y)+M:d<=m?(h=0,f=(d=Math.min(Math.max(-v,-y),v))*(d+2*y)+M):f=-(h=Math.max(0,-(_*v+x)))*h+(d=h>0?v:Math.min(Math.max(-v,-y),v))*(d+2*y)+M;else d=_>0?-v:v,f=-(h=Math.max(0,-(_*d+x)))*h+d*(d+2*y)+M;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),r&&r.copy(l).multiplyScalar(d).add(o),f}),intersectSphere:function(){var t=new d.a;return function(e,n){t.subVectors(e.center,this.origin);var r=t.dot(this.direction),o=t.dot(t)-r*r,l=e.radius*e.radius;if(o>l)return null;var c=Math.sqrt(l-o),h=r-c,d=r+c;return h<0&&d<0?null:h<0?this.at(d,n):this.at(h,n)}}(),intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,r,o,l,c,h,d=1/this.direction.x,f=1/this.direction.y,m=1/this.direction.z,v=this.origin;return d>=0?(n=(t.min.x-v.x)*d,r=(t.max.x-v.x)*d):(n=(t.max.x-v.x)*d,r=(t.min.x-v.x)*d),f>=0?(o=(t.min.y-v.y)*f,l=(t.max.y-v.y)*f):(o=(t.max.y-v.y)*f,l=(t.min.y-v.y)*f),n>l||o>r?null:((o>n||n!=n)&&(n=o),(l<r||r!=r)&&(r=l),m>=0?(c=(t.min.z-v.z)*m,h=(t.max.z-v.z)*m):(c=(t.max.z-v.z)*m,h=(t.min.z-v.z)*m),n>h||c>r?null:((c>n||n!=n)&&(n=c),(h<r||r!=r)&&(r=h),r<0?null:this.at(n>=0?n:r,e)))},intersectsBox:(r=new d.a,function(t){return null!==this.intersectBox(t,r)}),intersectTriangle:function(){var t=new d.a,e=new d.a,n=new d.a,r=new d.a;return function(a,b,o,l,c){e.subVectors(b,a),n.subVectors(o,a),r.crossVectors(e,n);var h,d=this.direction.dot(r);if(d>0){if(l)return null;h=1}else{if(!(d<0))return null;h=-1,d=-d}t.subVectors(this.origin,a);var f=h*this.direction.dot(n.crossVectors(t,n));if(f<0)return null;var m=h*this.direction.dot(e.cross(t));if(m<0)return null;if(f+m>d)return null;var v=-h*t.dot(r);return v<0?null:this.at(v/d,c)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}});var _,x,y,M,E,w,T,S,L=n(163),A=n(170);function R(a,b,t){this.a=void 0!==a?a:new d.a,this.b=void 0!==b?b:new d.a,this.c=void 0!==t?t:new d.a}Object.assign(R,{getNormal:(x=new d.a,function(a,b,t,e){void 0===e&&(console.warn("THREE.Triangle: .getNormal() target is now required"),e=new d.a),e.subVectors(t,b),x.subVectors(a,b),e.cross(x);var n=e.lengthSq();return n>0?e.multiplyScalar(1/Math.sqrt(n)):e.set(0,0,0)}),getBarycoord:function(){var t=new d.a,e=new d.a,n=new d.a;return function(r,a,b,o,l){t.subVectors(o,a),e.subVectors(b,a),n.subVectors(r,a);var c=t.dot(t),h=t.dot(e),f=t.dot(n),m=e.dot(e),v=e.dot(n),_=c*m-h*h;if(void 0===l&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),l=new d.a),0===_)return l.set(-2,-1,-1);var x=1/_,u=(m*f-h*v)*x,y=(c*v-h*f)*x;return l.set(1-u-y,y,u)}}(),containsPoint:function(){var t=new d.a;return function(e,a,b,n){return R.getBarycoord(e,a,b,n,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}(),getUV:(_=new d.a,function(t,e,n,r,o,l,c,h){return this.getBarycoord(t,e,n,r,_),h.set(0,0),h.addScaledVector(o,_.x),h.addScaledVector(l,_.y),h.addScaledVector(c,_.z),h}),isFrontFacing:function(){var t=new d.a,e=new d.a;return function(a,b,n,r){return t.subVectors(n,b),e.subVectors(a,b),t.cross(e).dot(r)<0}}()}),Object.assign(R.prototype,{set:function(a,b,t){return this.a.copy(a),this.b.copy(b),this.c.copy(t),this},setFromPointsAndIndices:function(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new d.a,e=new d.a;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new d.a),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return R.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new d.a),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return R.getBarycoord(t,this.a,this.b,this.c,e)},getUV:function(t,e,n,r,o){return R.getUV(t,this.a,this.b,this.c,e,n,r,o)},containsPoint:function(t){return R.containsPoint(t,this.a,this.b,this.c)},isFrontFacing:function(t){return R.isFrontFacing(this.a,this.b,this.c,t)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:(y=new d.a,M=new d.a,E=new d.a,w=new d.a,T=new d.a,S=new d.a,function(p,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new d.a);var e,n,a=this.a,b=this.b,r=this.c;y.subVectors(b,a),M.subVectors(r,a),w.subVectors(p,a);var o=y.dot(w),l=M.dot(w);if(o<=0&&l<=0)return t.copy(a);T.subVectors(p,b);var c=y.dot(T),h=M.dot(T);if(c>=0&&h<=c)return t.copy(b);var f=o*h-c*l;if(f<=0&&o>=0&&c<=0)return e=o/(o-c),t.copy(a).addScaledVector(y,e);S.subVectors(p,r);var m=y.dot(S),v=M.dot(S);if(v>=0&&m<=v)return t.copy(r);var _=m*l-o*v;if(_<=0&&l>=0&&v<=0)return n=l/(l-v),t.copy(a).addScaledVector(M,n);var x=c*v-m*h;if(x<=0&&h-c>=0&&m-v>=0)return E.subVectors(r,b),n=(h-c)/(h-c+(m-v)),t.copy(b).addScaledVector(E,n);var L=1/(x+_+f);return e=_*L,n=f*L,t.copy(a).addScaledVector(y,e).addScaledVector(M,n)}),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}});var P=n(199),C=n(158),D=n(168),N=n(166);function U(t){D.a.call(this),this.type="MeshBasicMaterial",this.color=new N.a(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=C.X,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}U.prototype=Object.create(D.a.prototype),U.prototype.constructor=U,U.prototype.isMeshBasicMaterial=!0,U.prototype.copy=function(source){return D.a.prototype.copy.call(this,source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this};var I=n(180);function F(t,e){A.a.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new I.a,this.material=void 0!==e?e:new U({color:16777215*Math.random()}),this.drawMode=C.ic,this.updateMorphTargets()}n.d(e,"a",function(){return F}),F.prototype=Object.assign(Object.create(A.a.prototype),{constructor:F,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(source){return A.a.prototype.copy.call(this,source),this.drawMode=source.drawMode,void 0!==source.morphTargetInfluences&&(this.morphTargetInfluences=source.morphTargetInfluences.slice()),void 0!==source.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,r=this.geometry;if(r.isBufferGeometry){var o=r.morphAttributes,l=Object.keys(o);if(l.length>0){var c=o[l[0]];if(void 0!==c)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=c.length;t<e;t++)n=c[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var h=r.morphTargets;void 0!==h&&h.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(){var t=new L.a,e=new v,n=new m.a,r=new d.a,o=new d.a,l=new d.a,c=new d.a,h=new d.a,_=new d.a,x=new d.a,y=new d.a,M=new d.a,E=new f.a,w=new f.a,T=new f.a,S=new d.a,A=new d.a;function D(object,t,e,n,r,o,l,c){if(null===(t.side===C.g?n.intersectTriangle(l,o,r,!0,c):n.intersectTriangle(r,o,l,t.side!==C.v,c)))return null;A.copy(c),A.applyMatrix4(object.matrixWorld);var h=e.ray.origin.distanceTo(A);return h<e.near||h>e.far?null:{distance:h,point:A.clone(),object:object}}function N(object,t,e,n,d,m,v,a,b,L){r.fromBufferAttribute(d,a),o.fromBufferAttribute(d,b),l.fromBufferAttribute(d,L);var A=object.morphTargetInfluences;if(t.morphTargets&&m&&A){x.set(0,0,0),y.set(0,0,0),M.set(0,0,0);for(var i=0,C=m.length;i<C;i++){var N=A[i],U=m[i];0!==N&&(c.fromBufferAttribute(U,a),h.fromBufferAttribute(U,b),_.fromBufferAttribute(U,L),x.addScaledVector(c.sub(r),N),y.addScaledVector(h.sub(o),N),M.addScaledVector(_.sub(l),N))}r.add(x),o.add(y),l.add(M)}var I=D(object,t,e,n,r,o,l,S);if(I){v&&(E.fromBufferAttribute(v,a),w.fromBufferAttribute(v,b),T.fromBufferAttribute(v,L),I.uv=R.getUV(S,r,o,l,E,w,T,new f.a));var F=new P.a(a,b,L);R.getNormal(r,o,l,F.normal),I.face=F}return I}return function(r,o){var l,c=this.geometry,h=this.material,d=this.matrixWorld;if(void 0!==h&&(null===c.boundingSphere&&c.computeBoundingSphere(),n.copy(c.boundingSphere),n.applyMatrix4(d),!1!==r.ray.intersectsSphere(n)&&(t.getInverse(d),e.copy(r.ray).applyMatrix4(t),null===c.boundingBox||!1!==e.intersectsBox(c.boundingBox))))if(c.isBufferGeometry){var a,b,m,i,v,_,x,y,M,L=c.index,A=c.attributes.position,P=c.morphAttributes.position,C=c.attributes.uv,U=c.groups,I=c.drawRange;if(null!==L)if(Array.isArray(h))for(i=0,_=U.length;i<_;i++)for(M=h[(y=U[i]).materialIndex],v=Math.max(y.start,I.start),x=Math.min(y.start+y.count,I.start+I.count);v<x;v+=3)a=L.getX(v),b=L.getX(v+1),m=L.getX(v+2),(l=N(this,M,r,e,A,P,C,a,b,m))&&(l.faceIndex=Math.floor(v/3),l.face.materialIndex=y.materialIndex,o.push(l));else for(i=Math.max(0,I.start),_=Math.min(L.count,I.start+I.count);i<_;i+=3)a=L.getX(i),b=L.getX(i+1),m=L.getX(i+2),(l=N(this,h,r,e,A,P,C,a,b,m))&&(l.faceIndex=Math.floor(i/3),o.push(l));else if(void 0!==A)if(Array.isArray(h))for(i=0,_=U.length;i<_;i++)for(M=h[(y=U[i]).materialIndex],v=Math.max(y.start,I.start),x=Math.min(y.start+y.count,I.start+I.count);v<x;v+=3)(l=N(this,M,r,e,A,P,C,a=v,b=v+1,m=v+2))&&(l.faceIndex=Math.floor(v/3),l.face.materialIndex=y.materialIndex,o.push(l));else for(i=Math.max(0,I.start),_=Math.min(A.count,I.start+I.count);i<_;i+=3)(l=N(this,h,r,e,A,P,C,a=i,b=i+1,m=i+2))&&(l.faceIndex=Math.floor(i/3),o.push(l))}else if(c.isGeometry){var F,z,O,B,G=Array.isArray(h),V=c.vertices,H=c.faces,k=c.faceVertexUvs[0];k.length>0&&(B=k);for(var W=0,X=H.length;W<X;W++){var j=H[W],Y=G?h[j.materialIndex]:h;if(void 0!==Y&&(F=V[j.a],z=V[j.b],O=V[j.c],l=D(this,Y,r,e,F,z,O,S))){if(B&&B[W]){var Z=B[W];E.copy(Z[0]),w.copy(Z[1]),T.copy(Z[2]),l.uv=R.getUV(S,F,z,O,E,w,T,new f.a)}l.face=j,l.faceIndex=W,o.push(l)}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}})},170:function(t,e,n){"use strict";var q,r,o=n(175),l=n(157),c=n(163),h=n(171),d=n(162);function f(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._order=r||f.DefaultOrder}function m(){this.mask=1}f.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],f.DefaultOrder="XYZ",Object.defineProperties(f.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(f.prototype,{isEuler:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._order=r||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var r=d.a.clamp,o=t.elements,l=o[0],c=o[4],h=o[8],f=o[1],m=o[5],v=o[9],_=o[2],x=o[6],y=o[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(r(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(-v,y),this._z=Math.atan2(-c,l)):(this._x=Math.atan2(x,m),this._z=0)):"YXZ"===e?(this._x=Math.asin(-r(v,-1,1)),Math.abs(v)<.99999?(this._y=Math.atan2(h,y),this._z=Math.atan2(f,m)):(this._y=Math.atan2(-_,l),this._z=0)):"ZXY"===e?(this._x=Math.asin(r(x,-1,1)),Math.abs(x)<.99999?(this._y=Math.atan2(-_,y),this._z=Math.atan2(-c,m)):(this._y=0,this._z=Math.atan2(f,l))):"ZYX"===e?(this._y=Math.asin(-r(_,-1,1)),Math.abs(_)<.99999?(this._x=Math.atan2(x,y),this._z=Math.atan2(f,l)):(this._x=0,this._z=Math.atan2(-c,m))):"YZX"===e?(this._z=Math.asin(r(f,-1,1)),Math.abs(f)<.99999?(this._x=Math.atan2(-v,m),this._y=Math.atan2(-_,l)):(this._x=0,this._y=Math.atan2(h,y))):"XZY"===e?(this._z=Math.asin(-r(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(x,m),this._y=Math.atan2(h,l)):(this._x=Math.atan2(-v,y),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this.onChangeCallback(),this},setFromQuaternion:(r=new c.a,function(q,t,e){return r.makeRotationFromQuaternion(q),this.setFromRotationMatrix(r,t,e)}),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:(q=new o.a,function(t){return q.setFromEuler(this),this.setFromQuaternion(q,t)}),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new l.a(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(m.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var v=n(165),_=n(158);n.d(e,"a",function(){return L});var x,y,M,E,w,T,S=0;function L(){Object.defineProperty(this,"id",{value:S++}),this.uuid=d.a.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=L.DefaultUp.clone();var t=new l.a,e=new f,n=new o.a,r=new l.a(1,1,1);e.onChange(function(){n.setFromEuler(e,!1)}),n.onChange(function(){e.setFromQuaternion(n,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new c.a},normalMatrix:{value:new v.a}}),this.matrix=new c.a,this.matrixWorld=new c.a,this.matrixAutoUpdate=L.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new m,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}L.DefaultUp=new l.a(0,1,0),L.DefaultMatrixAutoUpdate=!0,L.prototype=Object.assign(Object.create(h.a.prototype),{constructor:L,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(q){return this.quaternion.premultiply(q),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(q){this.quaternion.copy(q)},rotateOnAxis:(T=new o.a,function(t,e){return T.setFromAxisAngle(t,e),this.quaternion.multiply(T),this}),rotateOnWorldAxis:function(){var t=new o.a;return function(e,n){return t.setFromAxisAngle(e,n),this.quaternion.premultiply(t),this}}(),rotateX:(w=new l.a(1,0,0),function(t){return this.rotateOnAxis(w,t)}),rotateY:function(){var t=new l.a(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new l.a(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new l.a;return function(e,n){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(n)),this}}(),translateX:function(){var t=new l.a(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new l.a(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new l.a(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:(E=new c.a,function(t){return t.applyMatrix4(E.getInverse(this.matrixWorld))}),lookAt:function(){var t=new o.a,e=new c.a,n=new l.a,r=new l.a;return function(o,l,c){o.isVector3?n.copy(o):n.set(o,l,c);var h=this.parent;this.updateWorldMatrix(!0,!1),r.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?e.lookAt(r,n,this.up):e.lookAt(n,r,this.up),this.quaternion.setFromRotationMatrix(e),h&&(e.extractRotation(h.matrixWorld),t.setFromRotationMatrix(e),this.quaternion.premultiply(t.inverse()))}}(),add:function(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return object===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",object),this):(object&&object.isObject3D?(null!==object.parent&&object.parent.remove(object),object.parent=this,object.dispatchEvent({type:"added"}),this.children.push(object)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object),this)},remove:function(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}var t=this.children.indexOf(object);return-1!==t&&(object.parent=null,object.dispatchEvent({type:"removed"}),this.children.splice(t,1)),this},attach:(M=new c.a,function(object){return this.updateWorldMatrix(!0,!1),M.getInverse(this.matrixWorld),null!==object.parent&&(object.parent.updateWorldMatrix(!0,!1),M.multiply(object.parent.matrixWorld)),object.applyMatrix(M),object.updateWorldMatrix(!1,!1),this.add(object),this}),getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var i=0,n=this.children.length;i<n;i++){var object=this.children[i].getObjectByProperty(t,e);if(void 0!==object)return object}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new l.a),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(x=new l.a,y=new l.a,function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new o.a),this.updateMatrixWorld(!0),this.matrixWorld.decompose(x,t,y),t}),getWorldScale:function(){var t=new l.a,e=new o.a;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new l.a),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,n),n}}(),getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new l.a),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var r=this.children,i=0,o=r.length;i<o;i++)r[i].updateWorldMatrix(!1,!0)},toJSON:function(meta){var t=void 0===meta||"string"==typeof meta,output={};t&&(meta={geometries:{},materials:{},textures:{},images:{},shapes:{}},output.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var object={};function e(t,element){return void 0===t[element.uuid]&&(t[element.uuid]=element.toJSON(meta)),element.uuid}if(object.uuid=this.uuid,object.type=this.type,""!==this.name&&(object.name=this.name),!0===this.castShadow&&(object.castShadow=!0),!0===this.receiveShadow&&(object.receiveShadow=!0),!1===this.visible&&(object.visible=!1),!1===this.frustumCulled&&(object.frustumCulled=!1),0!==this.renderOrder&&(object.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(object.userData=this.userData),object.layers=this.layers.mask,object.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(object.matrixAutoUpdate=!1),this.isMesh&&this.drawMode!==_.ic&&(object.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){object.geometry=e(meta.geometries,this.geometry);var n=this.geometry.parameters;if(void 0!==n&&void 0!==n.shapes){var r=n.shapes;if(Array.isArray(r))for(var i=0,o=r.length;i<o;i++){var l=r[i];e(meta.shapes,l)}else e(meta.shapes,r)}}if(void 0!==this.material)if(Array.isArray(this.material)){var c=[];for(i=0,o=this.material.length;i<o;i++)c.push(e(meta.materials,this.material[i]));object.material=c}else object.material=e(meta.materials,this.material);if(this.children.length>0){object.children=[];for(i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(t){var h=v(meta.geometries),d=v(meta.materials),f=v(meta.textures),m=v(meta.images);r=v(meta.shapes);h.length>0&&(output.geometries=h),d.length>0&&(output.materials=d),f.length>0&&(output.textures=f),m.length>0&&(output.images=m),r.length>0&&(output.shapes=r)}return output.object=object,output;function v(t){var e=[];for(var n in t){var data=t[n];delete data.metadata,e.push(data)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(source,t){if(void 0===t&&(t=!0),this.name=source.name,this.up.copy(source.up),this.position.copy(source.position),this.quaternion.copy(source.quaternion),this.scale.copy(source.scale),this.matrix.copy(source.matrix),this.matrixWorld.copy(source.matrixWorld),this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate,this.layers.mask=source.layers.mask,this.visible=source.visible,this.castShadow=source.castShadow,this.receiveShadow=source.receiveShadow,this.frustumCulled=source.frustumCulled,this.renderOrder=source.renderOrder,this.userData=JSON.parse(JSON.stringify(source.userData)),!0===t)for(var i=0;i<source.children.length;i++){var e=source.children[i];this.add(e.clone())}return this}})},171:function(t,e,n){"use strict";function r(){}n.d(e,"a",function(){return r}),Object.assign(r.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),i=0,r=n.length;i<r;i++)n[i].call(this,t)}}}})},172:function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(170);function o(){r.a.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}o.prototype=Object.assign(Object.create(r.a.prototype),{constructor:o,isScene:!0,copy:function(source,t){return r.a.prototype.copy.call(this,source,t),null!==source.background&&(this.background=source.background.clone()),null!==source.fog&&(this.fog=source.fog.clone()),null!==source.overrideMaterial&&(this.overrideMaterial=source.overrideMaterial.clone()),this.autoUpdate=source.autoUpdate,this.matrixAutoUpdate=source.matrixAutoUpdate,this},toJSON:function(meta){var data=r.a.prototype.toJSON.call(this,meta);return null!==this.background&&(data.object.background=this.background.toJSON(meta)),null!==this.fog&&(data.object.fog=this.fog.toJSON()),data},dispose:function(){this.dispatchEvent({type:"dispose"})}})},173:function(t,e,n){"use strict";var r,o=n(158),l=n(162),c=n(171),h=n(161),d=n(165),f=function(image){var canvas;if("undefined"==typeof HTMLCanvasElement)return image.src;if(image instanceof HTMLCanvasElement)canvas=image;else{void 0===r&&(r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),r.width=image.width,r.height=image.height;var t=r.getContext("2d");image instanceof ImageData?t.putImageData(image,0,0):t.drawImage(image,0,0,image.width,image.height),canvas=r}return canvas.width>2048||canvas.height>2048?canvas.toDataURL("image/jpeg",.6):canvas.toDataURL("image/png")},m=0;function v(image,t,e,n,r,c,f,_,x,y){Object.defineProperty(this,"id",{value:m++}),this.uuid=l.a.generateUUID(),this.name="",this.image=void 0!==image?image:v.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:v.DEFAULT_MAPPING,this.wrapS=void 0!==e?e:o.k,this.wrapT=void 0!==n?n:o.k,this.magFilter=void 0!==r?r:o.M,this.minFilter=void 0!==c?c:o.N,this.anisotropy=void 0!==x?x:1,this.format=void 0!==f?f:o.rb,this.type=void 0!==_?_:o.lc,this.offset=new h.a(0,0),this.repeat=new h.a(1,1),this.center=new h.a(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new d.a,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==y?y:o.L,this.version=0,this.onUpdate=null}function _(data,t,e,n,r,l,c,h,d,f,m,_){v.call(this,null,l,c,h,d,f,n,r,m,_),this.image={data:data,width:t,height:e},this.magFilter=void 0!==d?d:o.Y,this.minFilter=void 0!==f?f:o.Y,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}v.DEFAULT_IMAGE=void 0,v.DEFAULT_MAPPING=o.jc,v.prototype=Object.assign(Object.create(c.a.prototype),{constructor:v,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(source){return this.name=source.name,this.image=source.image,this.mipmaps=source.mipmaps.slice(0),this.mapping=source.mapping,this.wrapS=source.wrapS,this.wrapT=source.wrapT,this.magFilter=source.magFilter,this.minFilter=source.minFilter,this.anisotropy=source.anisotropy,this.format=source.format,this.type=source.type,this.offset.copy(source.offset),this.repeat.copy(source.repeat),this.center.copy(source.center),this.rotation=source.rotation,this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrix.copy(source.matrix),this.generateMipmaps=source.generateMipmaps,this.premultiplyAlpha=source.premultiplyAlpha,this.flipY=source.flipY,this.unpackAlignment=source.unpackAlignment,this.encoding=source.encoding,this},toJSON:function(meta){var t=void 0===meta||"string"==typeof meta;if(!t&&void 0!==meta.textures[this.uuid])return meta.textures[this.uuid];var output={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var image=this.image;if(void 0===image.uuid&&(image.uuid=l.a.generateUUID()),!t&&void 0===meta.images[image.uuid]){var e;if(Array.isArray(image)){e=[];for(var i=0,n=image.length;i<n;i++)e.push(f(image[i]))}else e=f(image);meta.images[image.uuid]={uuid:image.uuid,url:e}}output.image=image.uuid}return t||(meta.textures[this.uuid]=output),output},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping!==o.jc)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case o.Wb:t.x=t.x-Math.floor(t.x);break;case o.k:t.x=t.x<0?0:1;break;case o.U:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case o.Wb:t.y=t.y-Math.floor(t.y);break;case o.k:t.y=t.y<0?0:1;break;case o.U:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(v.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),_.prototype=Object.create(v.prototype),_.prototype.constructor=_,_.prototype.isDataTexture=!0;var x,y,p,M,E=n(157),w=n(176);function T(t,e){this.normal=void 0!==t?t:new E.a(1,0,0),this.constant=void 0!==e?e:0}function S(t,e,n,r,o,l){this.planes=[void 0!==t?t:new T,void 0!==e?e:new T,void 0!==n?n:new T,void 0!==r?r:new T,void 0!==o?o:new T,void 0!==l?l:new T]}Object.assign(T.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:(x=new E.a,y=new E.a,function(a,b,t){var e=x.subVectors(t,b).cross(y.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(e,a),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new E.a),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new E.a;return function(line,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new E.a);var n=line.delta(t),r=this.normal.dot(n);if(0===r)return 0===this.distanceToPoint(line.start)?e.copy(line.start):void 0;var o=-(line.start.dot(this.normal)+this.constant)/r;return o<0||o>1?void 0:e.copy(n).multiplyScalar(o).add(line.start)}}(),intersectsLine:function(line){var t=this.distanceToPoint(line.start),e=this.distanceToPoint(line.end);return t<0&&e>0||e<0&&t>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new E.a),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new E.a,e=new d.a;return function(n,r){var o=r||e.getNormalMatrix(n),l=this.coplanarPoint(t).applyMatrix4(n),c=this.normal.applyMatrix3(o).normalize();return this.constant=-l.dot(c),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign(S.prototype,{set:function(t,e,n,r,o,l){var c=this.planes;return c[0].copy(t),c[1].copy(e),c[2].copy(n),c[3].copy(r),c[4].copy(o),c[5].copy(l),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,i=0;i<6;i++)e[i].copy(t.planes[i]);return this},setFromMatrix:function(t){var e=this.planes,n=t.elements,r=n[0],o=n[1],l=n[2],c=n[3],h=n[4],d=n[5],f=n[6],m=n[7],v=n[8],_=n[9],x=n[10],y=n[11],M=n[12],E=n[13],w=n[14],T=n[15];return e[0].setComponents(c-r,m-h,y-v,T-M).normalize(),e[1].setComponents(c+r,m+h,y+v,T+M).normalize(),e[2].setComponents(c+o,m+d,y+_,T+E).normalize(),e[3].setComponents(c-o,m-d,y-_,T-E).normalize(),e[4].setComponents(c-l,m-f,y-x,T-w).normalize(),e[5].setComponents(c+l,m+f,y+x,T+w).normalize(),this},intersectsObject:(M=new w.a,function(object){var t=object.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),M.copy(t.boundingSphere).applyMatrix4(object.matrixWorld),this.intersectsSphere(M)}),intersectsSprite:function(){var t=new w.a;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,n=t.center,r=-t.radius,i=0;i<6;i++){if(e[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:(p=new E.a,function(t){for(var e=this.planes,i=0;i<6;i++){var n=e[i];if(p.x=n.normal.x>0?t.max.x:t.min.x,p.y=n.normal.y>0?t.max.y:t.min.y,p.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(p)<0)return!1}return!0}),containsPoint:function(t){for(var e=this.planes,i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}});var L=n(163),A={alphamap_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",alphamap_pars_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",alphatest_fragment:"\n#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n",aomap_fragment:"\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\n\t#endif\n\n#endif\n",aomap_pars_fragment:"\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",bsdfs:'\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n\n}\n\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t// this is intended to be used on spot and point lights who are represented as luminous intensity\n\t// but who must be converted to luminous irradiance for surface lighting calculation\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\tif( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n#else\n\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n#endif\n\n}\n\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick \'94\n\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH \'13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n} // validated\n\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\n\t// See F_Schlick\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\n\treturn Fr * fresnel + F0;\n\n}\n\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\n\t// also see #12151\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\n\treturn 1.0 / ( gl * gv );\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\n\treturn specularColor * brdf.x + brdf.y;\n\n} // validated\n\n// Fdez-Agüera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\n\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n',bumpmap_pars_fragment:"\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",clipping_planes_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t}\n\n\t\tif ( clipped ) discard;\n\n\t#endif\n\n#endif\n",clipping_planes_pars_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",clipping_planes_pars_vertex:"\n#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"\n#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment:"\n#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",color_pars_fragment:"\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",color_pars_vertex:"\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",color_vertex:"\n#ifdef USE_COLOR\n\n\tvColor.xyz = color.xyz;\n\n#endif\n",common:"\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n",cube_uv_reflection_fragment:"\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n#define cubeUV_textureSize (1024.0)\n\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\n\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\t// Clamp the value to the max mip level counts. hard coded to 6 mips\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\n\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\t// float powScale = exp2(roughnessLevel + mipLevel);\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\t// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\t// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\n\tfloat rcpPowScale = 1.0 / powScale;\n\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\n\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\n\t// round to nearest mipmap if we are not interpolating.\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\n\t// Tri linear interpolation.\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\n\tvec4 result = mix(color10, color20, t);\n\n\treturn vec4(result.rgb, 1.0);\n}\n\n#endif\n",defaultnormal_vertex:"\nvec3 transformedNormal = normalMatrix * objectNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",displacementmap_pars_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",displacementmap_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n\n#endif\n",emissivemap_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",emissivemap_pars_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",encodings_fragment:"\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\n// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\n\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\n\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\n\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\n\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\n\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\n\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\n\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n\n// M matrix, for encoding\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\n\n// Inverse M matrix, for decoding\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",envmap_fragment:"\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\n\t\tvec2 sampleUV;\n\n\t\treflectVec = normalize( reflectVec );\n\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\n\t\treflectVec = normalize( reflectVec );\n\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\tenvColor = envMapTexelToLinear( envColor );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",envmap_pars_fragment:"\n#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n\n#ifdef USE_ENVMAP\n\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",envmap_pars_vertex:"\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",envmap_physical_pars_fragment:"\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\n\tvec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\n\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\n\t\t\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\n\t\t\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#else\n\n\t\t\t\t// force the bias high to get the last LOD level as it is the most blurred.\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\n\t\t#else\n\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\n\t\t#endif\n\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t}\n\n\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n\t\t//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\n\t\t//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\n\t\t// clamp to allowable LOD ranges.\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n\t}\n\n\tvec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\n\t\t#endif\n\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#endif\n\n\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t}\n\n#endif\n",envmap_vertex:"\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\n\n\tfogDepth = -mvPosition.z;\n\n#endif\n",fog_pars_vertex:"\n#ifdef USE_FOG\n\n\tvarying float fogDepth;\n\n#endif\n",fog_fragment:"\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",fog_pars_fragment:"\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",gradientmap_pars_fragment:"\n#ifdef TOON\n\n\tuniform sampler2D gradientMap;\n\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t\t// dotNL will be from -1.0 to 1.0\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t\t#ifdef USE_GRADIENTMAP\n\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\n\t\t#else\n\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t\t#endif\n\n\n\t}\n\n#endif\n",lightmap_fragment:"\n#ifdef USE_LIGHTMAP\n\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\n\n#endif\n",lightmap_pars_fragment:"\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",lights_lambert_vertex:"\nvec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\n#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\n#endif\n\n/*\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\t// TODO (abelnation): implement\n\n\t}\n\n#endif\n*/\n\n#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\n\t\t#endif\n\n\t}\n\n#endif\n",lights_pars_begin:"\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI;\n\n\t#endif\n\n\treturn irradiance;\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( angleCos > spotLight.coneCos ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",lights_phong_fragment:"\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct BlinnPhongMaterial {\n\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t#ifdef TOON\n\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\t#else\n\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\n\t#endif\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat ); // Burley clearcoat model\n\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"\nstruct PhysicalMaterial {\n\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n\n};\n\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\t#ifndef STANDARD\n\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\n\t#endif\n\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t// Defer to the IndirectSpecular function to compute\n\t// the indirectDiffuse if energy preservation is enabled.\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\t#endif\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\n\t// Both indirect specular and diffuse light accumulate here\n\t// if energy preservation enabled, and PMREM provided.\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\n\t\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n\t#else\n\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\n\t#endif\n\n\t#ifndef STANDARD\n\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\n\t#endif\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n",lights_fragment_begin:"\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t}\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n\n#endif\n",lights_fragment_maps:"\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\n\n\t\t#endif\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tirradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, maxMipLevel );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\tradiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n\n#endif\n",lights_fragment_end:"\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",logdepthbuf_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",logdepthbuf_pars_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\n#endif\n",logdepthbuf_pars_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#else\n\n\t\tuniform float logDepthBufFC;\n\n\t#endif\n\n#endif\n",logdepthbuf_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n\t#else\n\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\tgl_Position.z *= gl_Position.w;\n\n\t#endif\n\n#endif\n",map_fragment:"\n#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n#endif\n",map_pars_fragment:"\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",map_particle_fragment:"\n#ifdef USE_MAP\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n\n#endif\n",map_particle_pars_fragment:"\n#ifdef USE_MAP\n\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n\n#endif\n",metalnessmap_fragment:"\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",metalnessmap_pars_fragment:"\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",morphnormal_vertex:"\n#ifdef USE_MORPHNORMALS\n\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n#endif\n",morphtarget_pars_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif\n",morphtarget_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n",normal_fragment_begin:"\n#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t#endif\n\n\t#ifdef USE_TANGENT\n\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",normal_fragment_maps:"\n#ifdef USE_NORMALMAP\n\n\t#ifdef OBJECTSPACE_NORMALMAP\n\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t\t#ifdef FLIP_SIDED\n\n\t\t\tnormal = - normal;\n\n\t\t#endif\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t#endif\n\n\t\tnormal = normalize( normalMatrix * normal );\n\n\t#else // tangent-space normal map\n\n\t\t#ifdef USE_TANGENT\n\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\n\t\t#else\n\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n\t\t#endif\n\n\t#endif\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n",normalmap_pars_fragment:"\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t#ifdef OBJECTSPACE_NORMALMAP\n\n\t\tuniform mat3 normalMatrix;\n\n\t#else\n\n\t\t// Per-Pixel Tangent Space Normal Mapping\n\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t\treturn normalize( tsn * mapN );\n\n\t\t}\n\n\t#endif\n\n#endif\n",packing:"\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",project_vertex:"\nvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"\n#if defined( DITHERING )\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",dithering_pars_fragment:"\n#if defined( DITHERING )\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift acording to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",roughnessmap_fragment:"\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",roughnessmap_pars_fragment:"\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",shadowmap_pars_fragment:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\n\t\tvec2 f = fract( uv * size + 0.5 );\n\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\n\t\treturn c;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",shadowmap_pars_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",shadowmap_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\n\t}\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n",shadowmask_pars_fragment:"\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\tDirectionalLight directionalLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHTS > 0\n\n\tSpotLight spotLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\tPointLight pointLight;\n\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",skinbase_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",skinning_pars_vertex:"\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",skinning_vertex:"\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",skinnormal_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",specularmap_fragment:"\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",specularmap_pars_fragment:"\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",tonemapping_fragment:"\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",tonemapping_pars_fragment:"\n#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicgames.com/archives/75\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\n\t// John Hable's filmic operator from Uncharted 2 video game\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n\n}\n\n// source: http://filmicgames.com/archives/75\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n\n}\n",uv_pars_fragment:"\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n",uv_pars_vertex:"\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n\n#endif\n",uv_vertex:"\n#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif\n",uv2_pars_fragment:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif\n",uv2_pars_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n#endif\n",uv2_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = uv2;\n\n#endif\n",worldpos_vertex:"\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n#endif\n",background_frag:"\nuniform sampler2D t2D;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec4 texColor = texture2D( t2D, vUv );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",background_vert:"\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",cube_frag:"\nuniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\nvoid main() {\n\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",cube_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",depth_frag:"\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\n\t#endif\n\n}\n",depth_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n}\n",distanceRGBA_frag:"\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",distanceRGBA_vert:"\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",equirect_frag:"\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV;\n\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",equirect_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",linedashed_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",linedashed_vert:"\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\n\tvLineDistance = scale * lineDistance;\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",meshbasic_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",meshbasic_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshlambert_frag:"\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\n\t#endif\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert:"\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshmatcap_frag:"\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( 1.0 );\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",meshmatcap_vert:"\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\t\tvNormal = normalize( transformedNormal );\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",meshphong_frag:"\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphong_vert:"\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",meshphysical_frag:"\n#define PHYSICAL\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",meshphysical_vert:"\n#define PHYSICAL\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",normal_frag:"\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n\nvoid main() {\n\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n}\n",normal_vert:"\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",points_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",points_vert:"\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",shadow_frag:"\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <fog_fragment>\n\n}\n",shadow_vert:"\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",sprite_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",sprite_vert:"\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n"};function R(t){var e={};for(var u in t)for(var p in e[u]={},t[u]){var n=t[u][p];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture)?e[u][p]=n.clone():Array.isArray(n)?e[u][p]=n.slice():e[u][p]=n}return e}function P(t){for(var e={},u=0;u<t.length;u++){var n=R(t[u]);for(var p in n)e[p]=n[p]}return e}var C=n(166),D={common:{diffuse:{value:new C.a(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new d.a},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new h.a(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new C.a(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new C.a(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new d.a}},sprite:{diffuse:{value:new C.a(15658734)},opacity:{value:1},center:{value:new h.a(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new d.a}}},N={basic:{uniforms:P([D.common,D.specularmap,D.envmap,D.aomap,D.lightmap,D.fog]),vertexShader:A.meshbasic_vert,fragmentShader:A.meshbasic_frag},lambert:{uniforms:P([D.common,D.specularmap,D.envmap,D.aomap,D.lightmap,D.emissivemap,D.fog,D.lights,{emissive:{value:new C.a(0)}}]),vertexShader:A.meshlambert_vert,fragmentShader:A.meshlambert_frag},phong:{uniforms:P([D.common,D.specularmap,D.envmap,D.aomap,D.lightmap,D.emissivemap,D.bumpmap,D.normalmap,D.displacementmap,D.gradientmap,D.fog,D.lights,{emissive:{value:new C.a(0)},specular:{value:new C.a(1118481)},shininess:{value:30}}]),vertexShader:A.meshphong_vert,fragmentShader:A.meshphong_frag},standard:{uniforms:P([D.common,D.envmap,D.aomap,D.lightmap,D.emissivemap,D.bumpmap,D.normalmap,D.displacementmap,D.roughnessmap,D.metalnessmap,D.fog,D.lights,{emissive:{value:new C.a(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:A.meshphysical_vert,fragmentShader:A.meshphysical_frag},matcap:{uniforms:P([D.common,D.bumpmap,D.normalmap,D.displacementmap,D.fog,{matcap:{value:null}}]),vertexShader:A.meshmatcap_vert,fragmentShader:A.meshmatcap_frag},points:{uniforms:P([D.points,D.fog]),vertexShader:A.points_vert,fragmentShader:A.points_frag},dashed:{uniforms:P([D.common,D.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:A.linedashed_vert,fragmentShader:A.linedashed_frag},depth:{uniforms:P([D.common,D.displacementmap]),vertexShader:A.depth_vert,fragmentShader:A.depth_frag},normal:{uniforms:P([D.common,D.bumpmap,D.normalmap,D.displacementmap,{opacity:{value:1}}]),vertexShader:A.normal_vert,fragmentShader:A.normal_frag},sprite:{uniforms:P([D.sprite,D.fog]),vertexShader:A.sprite_vert,fragmentShader:A.sprite_frag},background:{uniforms:{uvTransform:{value:new d.a},t2D:{value:null}},vertexShader:A.background_vert,fragmentShader:A.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:A.cube_vert,fragmentShader:A.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:A.equirect_vert,fragmentShader:A.equirect_frag},distanceRGBA:{uniforms:P([D.common,D.displacementmap,{referencePosition:{value:new E.a},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:A.distanceRGBA_vert,fragmentShader:A.distanceRGBA_frag},shadow:{uniforms:P([D.lights,D.fog,{color:{value:new C.a(0)},opacity:{value:1}}]),vertexShader:A.shadow_vert,fragmentShader:A.shadow_frag}};N.physical={uniforms:P([N.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:A.meshphysical_vert,fragmentShader:A.meshphysical_frag};var U=n(167);function I(){var t=null,e=!1,n=null;function r(time,o){!1!==e&&(n(time,o),t.requestAnimationFrame(r))}return{start:function(){!0!==e&&null!==n&&(t.requestAnimationFrame(r),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function F(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var data=e.get(n);data&&(t.deleteBuffer(data.buffer),e.delete(n))},update:function(n,r){n.isInterleavedBufferAttribute&&(n=n.data);var data=e.get(n);void 0===data?e.set(n,function(e,n){var r=e.array,o=e.dynamic?t.DYNAMIC_DRAW:t.STATIC_DRAW,l=t.createBuffer();t.bindBuffer(n,l),t.bufferData(n,r,o),e.onUploadCallback();var c=t.FLOAT;return r instanceof Float32Array?c=t.FLOAT:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?c=t.UNSIGNED_SHORT:r instanceof Int16Array?c=t.SHORT:r instanceof Uint32Array?c=t.UNSIGNED_INT:r instanceof Int32Array?c=t.INT:r instanceof Int8Array?c=t.BYTE:r instanceof Uint8Array&&(c=t.UNSIGNED_BYTE),{buffer:l,type:c,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(n,r)):data.version<n.version&&(function(e,n,r){var o=n.array,l=n.updateRange;t.bindBuffer(r,e),!1===n.dynamic?t.bufferData(r,o,t.STATIC_DRAW):-1===l.count?t.bufferSubData(r,0,o):0===l.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(t.bufferSubData(r,l.offset*o.BYTES_PER_ELEMENT,o.subarray(l.offset,l.offset+l.count)),l.count=-1)}(data.buffer,n,r),data.version=n.version)}}}var z=n(177),O=n(198),B=n(180),G=n(178);function V(t,e,n,r){O.a.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new H(t,e,n,r)),this.mergeVertices()}function H(t,e,n,r){B.a.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};var o,l,c=(t=t||1)/2,h=(e=e||1)/2,d=Math.floor(n)||1,f=Math.floor(r)||1,m=d+1,v=f+1,_=t/d,x=e/f,y=[],M=[],E=[],w=[];for(l=0;l<v;l++){var T=l*x-h;for(o=0;o<m;o++){var S=o*_-c;M.push(S,-T,0),E.push(0,0,1),w.push(o/d),w.push(1-l/f)}}for(l=0;l<f;l++)for(o=0;o<d;o++){var a=o+m*l,b=o+m*(l+1),L=o+1+m*(l+1),A=o+1+m*l;y.push(a,b,A),y.push(b,L,A)}this.setIndex(y),this.addAttribute("position",new G.b(M,3)),this.addAttribute("normal",new G.b(E,3)),this.addAttribute("uv",new G.b(w,2))}V.prototype=Object.create(O.a.prototype),V.prototype.constructor=V,H.prototype=Object.create(B.a.prototype),H.prototype.constructor=H;var k=n(168),W="\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",X="\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n";function j(t){k.a.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=W,this.fragmentShader=X,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}j.prototype=Object.create(k.a.prototype),j.prototype.constructor=j,j.prototype.isShaderMaterial=!0,j.prototype.copy=function(source){return k.a.prototype.copy.call(this,source),this.fragmentShader=source.fragmentShader,this.vertexShader=source.vertexShader,this.uniforms=R(source.uniforms),this.defines=Object.assign({},source.defines),this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.lights=source.lights,this.clipping=source.clipping,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this.extensions=source.extensions,this},j.prototype.toJSON=function(meta){var data=k.a.prototype.toJSON.call(this,meta);for(var t in data.uniforms={},this.uniforms){var e=this.uniforms[t].value;e&&e.isTexture?data.uniforms[t]={type:"t",value:e.toJSON(meta).uuid}:e&&e.isColor?data.uniforms[t]={type:"c",value:e.getHex()}:e&&e.isVector2?data.uniforms[t]={type:"v2",value:e.toArray()}:e&&e.isVector3?data.uniforms[t]={type:"v3",value:e.toArray()}:e&&e.isVector4?data.uniforms[t]={type:"v4",value:e.toArray()}:e&&e.isMatrix3?data.uniforms[t]={type:"m3",value:e.toArray()}:e&&e.isMatrix4?data.uniforms[t]={type:"m4",value:e.toArray()}:data.uniforms[t]={value:e}}Object.keys(this.defines).length>0&&(data.defines=this.defines),data.vertexShader=this.vertexShader,data.fragmentShader=this.fragmentShader;var n={};for(var r in this.extensions)!0===this.extensions[r]&&(n[r]=!0);return Object.keys(n).length>0&&(data.extensions=n),data};var Y=n(169);function Z(t,e,n,r){var l,c,h=new C.a(0),d=0,f=null,m=0;function v(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,r)}return{getClearColor:function(){return h},setClearColor:function(t,e){h.set(t),v(h,d=void 0!==e?e:1)},getClearAlpha:function(){return d},setClearAlpha:function(t){v(h,d=t)},render:function(e,r,_,x){var y=r.background,M=t.vr,E=M.getSession&&M.getSession();if(E&&"additive"===E.environmentBlendMode&&(y=null),null===y?(v(h,d),f=null,m=0):y&&y.isColor&&(v(y,1),x=!0,f=null,m=0),(t.autoClear||x)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),y&&(y.isCubeTexture||y.isWebGLRenderTargetCube)){void 0===c&&((c=new Y.a(new z.a(1,1,1),new j({type:"BackgroundCubeMaterial",uniforms:R(N.cube.uniforms),vertexShader:N.cube.vertexShader,fragmentShader:N.cube.fragmentShader,side:o.g,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),c.geometry.removeAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.tCube.value}}),n.update(c));var w=y.isWebGLRenderTargetCube?y.texture:y;c.material.uniforms.tCube.value=w,c.material.uniforms.tFlip.value=y.isWebGLRenderTargetCube?1:-1,f===y&&m===w.version||(c.material.needsUpdate=!0,f=y,m=w.version),e.unshift(c,c.geometry,c.material,0,0,null)}else y&&y.isTexture&&(void 0===l&&((l=new Y.a(new H(2,2),new j({type:"BackgroundMaterial",uniforms:R(N.background.uniforms),vertexShader:N.background.vertexShader,fragmentShader:N.background.fragmentShader,side:o.D,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(l)),l.material.uniforms.t2D.value=y,!0===y.matrixAutoUpdate&&y.updateMatrix(),l.material.uniforms.uvTransform.value.copy(y.matrix),f===y&&m===y.version||(l.material.needsUpdate=!0,f=y,m=y.version),e.unshift(l,l.geometry,l.material,0,0,null))}}}function J(t,e,n,r){var o;this.setMode=function(t){o=t},this.render=function(e,r){t.drawArrays(o,e,r),n.update(r,o)},this.renderInstances=function(l,c,h){var d;if(r.isWebGL2)d=t;else if(null===(d=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");d[r.isWebGL2?"drawArraysInstanced":"drawArraysInstancedANGLE"](o,c,h,l.maxInstancedCount),n.update(h,o,l.maxInstancedCount)}}function Q(t,e,n){var r;function o(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var l="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,c=void 0!==n.precision?n.precision:"highp",h=o(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);var d=!0===n.logarithmicDepthBuffer,f=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),m=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),v=t.getParameter(t.MAX_TEXTURE_SIZE),_=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),x=t.getParameter(t.MAX_VERTEX_ATTRIBS),y=t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),M=t.getParameter(t.MAX_VARYING_VECTORS),E=t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),w=m>0,T=l||!!e.get("OES_texture_float");return{isWebGL2:l,getMaxAnisotropy:function(){if(void 0!==r)return r;var n=e.get("EXT_texture_filter_anisotropic");return r=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:o,precision:c,logarithmicDepthBuffer:d,maxTextures:f,maxVertexTextures:m,maxTextureSize:v,maxCubemapSize:_,maxAttributes:x,maxVertexUniforms:y,maxVaryings:M,maxFragmentUniforms:E,vertexTextures:w,floatFragmentTextures:T,floatVertexTextures:w&&T,maxSamples:l?t.getParameter(t.MAX_SAMPLES):0}}function K(){var t=this,e=null,n=0,r=!1,o=!1,l=new T,c=new d.a,h={value:null,needsUpdate:!1};function f(){h.value!==e&&(h.value=e,h.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function m(e,n,r,o){var d=null!==e?e.length:0,f=null;if(0!==d){if(f=h.value,!0!==o||null===f){var m=r+4*d,v=n.matrixWorldInverse;c.getNormalMatrix(v),(null===f||f.length<m)&&(f=new Float32Array(m));for(var i=0,_=r;i!==d;++i,_+=4)l.copy(e[i]).applyMatrix4(v,c),l.normal.toArray(f,_),f[_+3]=l.constant}h.value=f,h.needsUpdate=!0}return t.numPlanes=d,f}this.uniform=h,this.numPlanes=0,this.numIntersection=0,this.init=function(t,o,l){var c=0!==t.length||o||0!==n||r;return r=o,e=m(t,l,0),n=t.length,c},this.beginShadows=function(){o=!0,m(null)},this.endShadows=function(){o=!1,f()},this.setState=function(t,l,c,d,v,_){if(!r||null===t||0===t.length||o&&!c)o?m(null):f();else{var x=o?0:n,y=4*x,M=v.clippingState||null;h.value=M,M=m(t,d,y,_);for(var i=0;i!==y;++i)M[i]=e[i];v.clippingState=M,this.numIntersection=l?this.numPlanes:0,this.numPlanes+=x}}}function $(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var r;switch(n){case"WEBGL_depth_texture":r=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=t.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=r,r}}}var tt=n(200);function et(t,e,n){var r={},o={};function l(t){var c=t.target,h=r[c.id];for(var d in null!==h.index&&e.remove(h.index),h.attributes)e.remove(h.attributes[d]);c.removeEventListener("dispose",l),delete r[c.id];var f=o[h.id];f&&(e.remove(f),delete o[h.id]),n.memory.geometries--}return{get:function(object,t){var e=r[t.id];return e||(t.addEventListener("dispose",l),t.isBufferGeometry?e=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new B.a).setFromObject(object)),e=t._bufferGeometry),r[t.id]=e,n.memory.geometries++,e)},update:function(n){var r=n.index,o=n.attributes;for(var l in null!==r&&e.update(r,t.ELEMENT_ARRAY_BUFFER),o)e.update(o[l],t.ARRAY_BUFFER);var c=n.morphAttributes;for(var l in c)for(var h=c[l],i=0,d=h.length;i<d;i++)e.update(h[i],t.ARRAY_BUFFER)},getWireframeAttribute:function(n){var r=o[n.id];if(r)return r;var l,c=[],h=n.index,d=n.attributes;if(null!==h)for(var i=0,f=(l=h.array).length;i<f;i+=3){var a=l[i+0],b=l[i+1],m=l[i+2];c.push(a,b,b,m,m,a)}else for(i=0,f=(l=d.position.array).length/3-1;i<f;i+=3)a=i+0,b=i+1,m=i+2,c.push(a,b,b,m,m,a);return r=new(Object(tt.a)(c)>65535?G.d:G.c)(c,1),e.update(r,t.ELEMENT_ARRAY_BUFFER),o[n.id]=r,r}}}function nt(t,e,n,r){var o,l,c;this.setMode=function(t){o=t},this.setIndex=function(t){l=t.type,c=t.bytesPerElement},this.render=function(e,r){t.drawElements(o,r,l,e*c),n.update(r,o)},this.renderInstances=function(h,d,f){var m;if(r.isWebGL2)m=t;else if(null===(m=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");m[r.isWebGL2?"drawElementsInstanced":"drawElementsInstancedANGLE"](o,f,l,d*c,h.maxInstancedCount),n.update(f,o,h.maxInstancedCount)}}function it(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,r,o){switch(o=o||1,e.calls++,r){case t.TRIANGLES:e.triangles+=o*(n/3);break;case t.TRIANGLE_STRIP:case t.TRIANGLE_FAN:e.triangles+=o*(n-2);break;case t.LINES:e.lines+=o*(n/2);break;case t.LINE_STRIP:e.lines+=o*(n-1);break;case t.LINE_LOOP:e.lines+=o*n;break;case t.POINTS:e.points+=o*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}function at(a,b){return Math.abs(b[1])-Math.abs(a[1])}function ot(t){var e={},n=new Float32Array(8);return{update:function(object,r,o,l){var c=object.morphTargetInfluences,h=c.length,d=e[r.id];if(void 0===d){d=[];for(var i=0;i<h;i++)d[i]=[i,0];e[r.id]=d}var f=o.morphTargets&&r.morphAttributes.position,m=o.morphNormals&&r.morphAttributes.normal;for(i=0;i<h;i++)0!==(v=d[i])[1]&&(f&&r.removeAttribute("morphTarget"+i),m&&r.removeAttribute("morphNormal"+i));for(i=0;i<h;i++)(v=d[i])[0]=i,v[1]=c[i];for(d.sort(at),i=0;i<8;i++){var v;if(v=d[i]){var _=v[0],x=v[1];if(x){f&&r.addAttribute("morphTarget"+i,f[_]),m&&r.addAttribute("morphNormal"+i,m[_]),n[i]=x;continue}}n[i]=0}l.getUniforms().setValue(t,"morphTargetInfluences",n)}}}function st(t,e){var n={};return{update:function(object){var r=e.render.frame,o=object.geometry,l=t.get(object,o);return n[l.id]!==r&&(o.isGeometry&&l.updateFromObject(object),t.update(l),n[l.id]=r),l},dispose:function(){n={}}}}function lt(t,e,n,r,l,c,h,d,f,m){t=void 0!==t?t:[],e=void 0!==e?e:o.l,h=void 0!==h?h:o.Nb,v.call(this,t,e,n,r,l,c,h,d,f,m),this.flipY=!1}function ct(data,t,e,n){v.call(this,null),this.image={data:data,width:t,height:e,depth:n},this.magFilter=o.Y,this.minFilter=o.Y,this.wrapR=o.k,this.generateMipmaps=!1,this.flipY=!1}function ut(data,t,e,n){v.call(this,null),this.image={data:data,width:t,height:e,depth:n},this.magFilter=o.Y,this.minFilter=o.Y,this.wrapR=o.k,this.generateMipmaps=!1,this.flipY=!1}lt.prototype=Object.create(v.prototype),lt.prototype.constructor=lt,lt.prototype.isCubeTexture=!0,Object.defineProperty(lt.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),ct.prototype=Object.create(v.prototype),ct.prototype.constructor=ct,ct.prototype.isDataTexture2DArray=!0,ut.prototype=Object.create(v.prototype),ut.prototype.constructor=ut,ut.prototype.isDataTexture3D=!0;var ht=new v,ft=new ct,pt=new ut,mt=new lt,gt=[],vt=[],_t=new Float32Array(16),xt=new Float32Array(9),yt=new Float32Array(4);function bt(t,e,n){var r=t[0];if(r<=0||r>0)return t;var o=e*n,l=gt[o];if(void 0===l&&(l=new Float32Array(o),gt[o]=l),0!==e){r.toArray(l,0);for(var i=1,c=0;i!==e;++i)c+=n,t[i].toArray(l,c)}return l}function Mt(a,b){if(a.length!==b.length)return!1;for(var i=0,t=a.length;i<t;i++)if(a[i]!==b[i])return!1;return!0}function Et(a,b){for(var i=0,t=b.length;i<t;i++)a[i]=b[i]}function wt(t,e){var n=vt[e];void 0===n&&(n=new Int32Array(e),vt[e]=n);for(var i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Tt(t,e){var n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function St(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Mt(n,e))return;t.uniform2fv(this.addr,e),Et(n,e)}}function Lt(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Mt(n,e))return;t.uniform3fv(this.addr,e),Et(n,e)}}function At(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Mt(n,e))return;t.uniform4fv(this.addr,e),Et(n,e)}}function Rt(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Mt(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),Et(n,e)}else{if(Mt(n,r))return;yt.set(r),t.uniformMatrix2fv(this.addr,!1,yt),Et(n,r)}}function Pt(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Mt(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),Et(n,e)}else{if(Mt(n,r))return;xt.set(r),t.uniformMatrix3fv(this.addr,!1,xt),Et(n,r)}}function Ct(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(Mt(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),Et(n,e)}else{if(Mt(n,r))return;_t.set(r),t.uniformMatrix4fv(this.addr,!1,_t),Et(n,r)}}function Dt(t,e,n){var r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.safeSetTexture2D(e||ht,o)}function Nt(t,e,n){var r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.setTexture2DArray(e||ft,o)}function Ut(t,e,n){var r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.setTexture3D(e||pt,o)}function It(t,e,n){var r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.safeSetTextureCube(e||mt,o)}function Ft(t,e){var n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function zt(t,e){var n=this.cache;Mt(n,e)||(t.uniform2iv(this.addr,e),Et(n,e))}function Ot(t,e){var n=this.cache;Mt(n,e)||(t.uniform3iv(this.addr,e),Et(n,e))}function Bt(t,e){var n=this.cache;Mt(n,e)||(t.uniform4iv(this.addr,e),Et(n,e))}function Gt(t,e){t.uniform1fv(this.addr,e)}function Vt(t,e){t.uniform1iv(this.addr,e)}function Ht(t,e){t.uniform2iv(this.addr,e)}function kt(t,e){t.uniform3iv(this.addr,e)}function Wt(t,e){t.uniform4iv(this.addr,e)}function Xt(t,e){var data=bt(e,this.size,2);t.uniform2fv(this.addr,data)}function jt(t,e){var data=bt(e,this.size,3);t.uniform3fv(this.addr,data)}function Yt(t,e){var data=bt(e,this.size,4);t.uniform4fv(this.addr,data)}function qt(t,e){var data=bt(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,data)}function Zt(t,e){var data=bt(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,data)}function Jt(t,e){var data=bt(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,data)}function Qt(t,e,n){var r=e.length,o=wt(n,r);t.uniform1iv(this.addr,o);for(var i=0;i!==r;++i)n.safeSetTexture2D(e[i]||ht,o[i])}function Kt(t,e,n){var r=e.length,o=wt(n,r);t.uniform1iv(this.addr,o);for(var i=0;i!==r;++i)n.safeSetTextureCube(e[i]||mt,o[i])}function $t(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Tt;case 35664:return St;case 35665:return Lt;case 35666:return At;case 35674:return Rt;case 35675:return Pt;case 35676:return Ct;case 35678:case 36198:return Dt;case 35679:return Ut;case 35680:return It;case 36289:return Nt;case 5124:case 35670:return Ft;case 35667:case 35671:return zt;case 35668:case 35672:return Ot;case 35669:case 35673:return Bt}}(e.type)}function te(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Gt;case 35664:return Xt;case 35665:return jt;case 35666:return Yt;case 35674:return qt;case 35675:return Zt;case 35676:return Jt;case 35678:return Qt;case 35680:return Kt;case 5124:case 35670:return Vt;case 35667:case 35671:return Ht;case 35668:case 35672:return kt;case 35669:case 35673:return Wt}}(e.type)}function ee(t){this.id=t,this.seq=[],this.map={}}te.prototype.updateCache=function(data){var t=this.cache;data instanceof Float32Array&&t.length!==data.length&&(this.cache=new Float32Array(data.length)),Et(t,data)},ee.prototype.setValue=function(t,e,n){for(var r=this.seq,i=0,o=r.length;i!==o;++i){var u=r[i];u.setValue(t,e[u.id],n)}};var ne=/([\w\d_]+)(\])?(\[|\.)?/g;function ie(t,e){t.seq.push(e),t.map[e.id]=e}function re(t,e,n){var path=t.name,r=path.length;for(ne.lastIndex=0;;){var o=ne.exec(path),l=ne.lastIndex,c=o[1],h="]"===o[2],d=o[3];if(h&&(c|=0),void 0===d||"["===d&&l+2===r){ie(n,void 0===d?new $t(c,t,e):new te(c,t,e));break}var f=n.map[c];void 0===f&&ie(n,f=new ee(c)),n=f}}function ae(t,e){this.seq=[],this.map={};for(var n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),i=0;i<n;++i){var r=t.getActiveUniform(e,i);re(r,t.getUniformLocation(e,r.name),this)}}function oe(t,e,n,r){var o=t.createShader(e);return t.shaderSource(o,n),t.compileShader(o),!0===r&&(!1===t.getShaderParameter(o,t.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(o)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",e===t.VERTEX_SHADER?"vertex":"fragment",t.getShaderInfoLog(o),function(t){for(var e=t.split("\n"),i=0;i<e.length;i++)e[i]=i+1+": "+e[i];return e.join("\n")}(n))),o}ae.prototype.setValue=function(t,e,n,r){var u=this.map[e];void 0!==u&&u.setValue(t,n,r)},ae.prototype.setOptional=function(t,object,e){var n=object[e];void 0!==n&&this.setValue(t,e,n)},ae.upload=function(t,e,n,r){for(var i=0,o=e.length;i!==o;++i){var u=e[i],l=n[u.id];!1!==l.needsUpdate&&u.setValue(t,l.value,r)}},ae.seqWithValue=function(t,e){for(var n=[],i=0,r=t.length;i!==r;++i){var u=t[i];u.id in e&&n.push(u)}return n};var se=0;function le(t){switch(t){case o.L:return["Linear","( value )"];case o.tc:return["sRGB","( value )"];case o.Mb:return["RGBE","( value )"];case o.Pb:return["RGBM","( value, 7.0 )"];case o.Ob:return["RGBM","( value, 16.0 )"];case o.Lb:return["RGBD","( value, 256.0 )"];case o.E:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+t)}}function ce(t,e){var n=le(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function ue(t,e){var n;switch(e){case o.P:n="Linear";break;case o.Vb:n="Reinhard";break;case o.kc:n="Uncharted2";break;case o.j:n="OptimizedCineon";break;case o.a:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function he(t){return""!==t}function de(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function fe(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function pe(t){return t.replace(/^[ \t]*#include +<([\w\d.\/]+)>/gm,function(t,e){var n=A[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return pe(n)})}function me(t){return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(t,e,n,r){for(var o="",i=parseInt(e);i<parseInt(n);i++)o+=r.replace(/\[ i \]/g,"[ "+i+" ]");return o})}function ge(t,e,code,n,r,l,c,h){var d=t.context,f=n.defines,m=r.vertexShader,v=r.fragmentShader,_="SHADOWMAP_TYPE_BASIC";l.shadowMapType===o.nb?_="SHADOWMAP_TYPE_PCF":l.shadowMapType===o.ob&&(_="SHADOWMAP_TYPE_PCF_SOFT");var x="ENVMAP_TYPE_CUBE",y="ENVMAP_MODE_REFLECTION",M="ENVMAP_BLENDING_MULTIPLY";if(l.envMap){switch(n.envMap.mapping){case o.l:case o.m:x="ENVMAP_TYPE_CUBE";break;case o.n:case o.o:x="ENVMAP_TYPE_CUBE_UV";break;case o.z:case o.A:x="ENVMAP_TYPE_EQUIREC";break;case o.Zb:x="ENVMAP_TYPE_SPHERE"}switch(n.envMap.mapping){case o.m:case o.A:y="ENVMAP_MODE_REFRACTION"}switch(n.combine){case o.X:M="ENVMAP_BLENDING_MULTIPLY";break;case o.V:M="ENVMAP_BLENDING_MIX";break;case o.c:M="ENVMAP_BLENDING_ADD"}}var E,w,T,S,L,R=t.gammaFactor>0?t.gammaFactor:1,P=c.isWebGL2?"":function(t,e,n){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap&&!e.objectSpaceNormalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(he).join("\n")}(n.extensions,l,e),C=function(t){var e=[];for(var n in t){var r=t[n];!1!==r&&e.push("#define "+n+" "+r)}return e.join("\n")}(f),D=d.createProgram();if(n.isRawShaderMaterial?((E=[C].filter(he).join("\n")).length>0&&(E+="\n"),(w=[P,C].filter(he).join("\n")).length>0&&(w+="\n")):(E=["precision "+l.precision+" float;","precision "+l.precision+" int;","#define SHADER_NAME "+r.name,C,l.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+R,"#define MAX_BONES "+l.maxBones,l.useFog&&l.fog?"#define USE_FOG":"",l.useFog&&l.fogExp?"#define FOG_EXP2":"",l.map?"#define USE_MAP":"",l.envMap?"#define USE_ENVMAP":"",l.envMap?"#define "+y:"",l.lightMap?"#define USE_LIGHTMAP":"",l.aoMap?"#define USE_AOMAP":"",l.emissiveMap?"#define USE_EMISSIVEMAP":"",l.bumpMap?"#define USE_BUMPMAP":"",l.normalMap?"#define USE_NORMALMAP":"",l.normalMap&&l.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",l.displacementMap&&l.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",l.specularMap?"#define USE_SPECULARMAP":"",l.roughnessMap?"#define USE_ROUGHNESSMAP":"",l.metalnessMap?"#define USE_METALNESSMAP":"",l.alphaMap?"#define USE_ALPHAMAP":"",l.vertexTangents?"#define USE_TANGENT":"",l.vertexColors?"#define USE_COLOR":"",l.flatShading?"#define FLAT_SHADED":"",l.skinning?"#define USE_SKINNING":"",l.useVertexTexture?"#define BONE_TEXTURE":"",l.morphTargets?"#define USE_MORPHTARGETS":"",l.morphNormals&&!1===l.flatShading?"#define USE_MORPHNORMALS":"",l.doubleSided?"#define DOUBLE_SIDED":"",l.flipSided?"#define FLIP_SIDED":"",l.shadowMapEnabled?"#define USE_SHADOWMAP":"",l.shadowMapEnabled?"#define "+_:"",l.sizeAttenuation?"#define USE_SIZEATTENUATION":"",l.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",l.logarithmicDepthBuffer&&(c.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(he).join("\n"),w=[P,"precision "+l.precision+" float;","precision "+l.precision+" int;","#define SHADER_NAME "+r.name,C,l.alphaTest?"#define ALPHATEST "+l.alphaTest+(l.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+R,l.useFog&&l.fog?"#define USE_FOG":"",l.useFog&&l.fogExp?"#define FOG_EXP2":"",l.map?"#define USE_MAP":"",l.matcap?"#define USE_MATCAP":"",l.envMap?"#define USE_ENVMAP":"",l.envMap?"#define "+x:"",l.envMap?"#define "+y:"",l.envMap?"#define "+M:"",l.lightMap?"#define USE_LIGHTMAP":"",l.aoMap?"#define USE_AOMAP":"",l.emissiveMap?"#define USE_EMISSIVEMAP":"",l.bumpMap?"#define USE_BUMPMAP":"",l.normalMap?"#define USE_NORMALMAP":"",l.normalMap&&l.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",l.specularMap?"#define USE_SPECULARMAP":"",l.roughnessMap?"#define USE_ROUGHNESSMAP":"",l.metalnessMap?"#define USE_METALNESSMAP":"",l.alphaMap?"#define USE_ALPHAMAP":"",l.vertexTangents?"#define USE_TANGENT":"",l.vertexColors?"#define USE_COLOR":"",l.gradientMap?"#define USE_GRADIENTMAP":"",l.flatShading?"#define FLAT_SHADED":"",l.doubleSided?"#define DOUBLE_SIDED":"",l.flipSided?"#define FLIP_SIDED":"",l.shadowMapEnabled?"#define USE_SHADOWMAP":"",l.shadowMapEnabled?"#define "+_:"",l.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",l.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",l.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",l.logarithmicDepthBuffer&&(c.isWebGL2||e.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",l.envMap&&(c.isWebGL2||e.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",l.toneMapping!==o.eb?"#define TONE_MAPPING":"",l.toneMapping!==o.eb?A.tonemapping_pars_fragment:"",l.toneMapping!==o.eb?ue("toneMapping",l.toneMapping):"",l.dithering?"#define DITHERING":"",l.outputEncoding||l.mapEncoding||l.matcapEncoding||l.envMapEncoding||l.emissiveMapEncoding?A.encodings_pars_fragment:"",l.mapEncoding?ce("mapTexelToLinear",l.mapEncoding):"",l.matcapEncoding?ce("matcapTexelToLinear",l.matcapEncoding):"",l.envMapEncoding?ce("envMapTexelToLinear",l.envMapEncoding):"",l.emissiveMapEncoding?ce("emissiveMapTexelToLinear",l.emissiveMapEncoding):"",l.outputEncoding?(T="linearToOutputTexel",S=l.outputEncoding,L=le(S),"vec4 "+T+"( vec4 value ) { return LinearTo"+L[0]+L[1]+"; }"):"",l.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(he).join("\n")),m=fe(m=de(m=pe(m),l),l),v=fe(v=de(v=pe(v),l),l),m=me(m),v=me(v),c.isWebGL2&&!n.isRawShaderMaterial){var N=!1,U=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==m.match(U)&&null!==v.match(U)&&(N=!0,m=m.replace(U,""),v=v.replace(U,"")),E=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+E,w=["#version 300 es\n","#define varying in",N?"":"out highp vec4 pc_fragColor;",N?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+w}var I,F,z=E+m,O=w+v,B=oe(d,d.VERTEX_SHADER,z,t.debug.checkShaderErrors),G=oe(d,d.FRAGMENT_SHADER,O,t.debug.checkShaderErrors);if(d.attachShader(D,B),d.attachShader(D,G),void 0!==n.index0AttributeName?d.bindAttribLocation(D,0,n.index0AttributeName):!0===l.morphTargets&&d.bindAttribLocation(D,0,"position"),d.linkProgram(D),t.debug.checkShaderErrors){var V=d.getProgramInfoLog(D).trim(),H=d.getShaderInfoLog(B).trim(),k=d.getShaderInfoLog(G).trim(),W=!0,X=!0;!1===d.getProgramParameter(D,d.LINK_STATUS)?(W=!1,console.error("THREE.WebGLProgram: shader error: ",d.getError(),"gl.VALIDATE_STATUS",d.getProgramParameter(D,d.VALIDATE_STATUS),"gl.getProgramInfoLog",V,H,k)):""!==V?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",V):""!==H&&""!==k||(X=!1),X&&(this.diagnostics={runnable:W,material:n,programLog:V,vertexShader:{log:H,prefix:E},fragmentShader:{log:k,prefix:w}})}return d.deleteShader(B),d.deleteShader(G),this.getUniforms=function(){return void 0===I&&(I=new ae(d,D,h)),I},this.getAttributes=function(){return void 0===F&&(F=function(t,e){for(var n={},r=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES),i=0;i<r;i++){var o=t.getActiveAttrib(e,i).name;n[o]=t.getAttribLocation(e,o)}return n}(d,D)),F},this.destroy=function(){d.deleteProgram(D),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=r.name,this.id=se++,this.code=code,this.usedTimes=1,this.program=D,this.vertexShader=B,this.fragmentShader=G,this}function ve(t,e,n,r){var l=[],c={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},h=["precision","supportsVertexTextures","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function d(map,t){var e;return map?map.isTexture?e=map.encoding:map.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=map.texture.encoding):e=o.L,e===o.L&&t&&(e=o.E),e}this.getParameters=function(e,r,l,h,f,m,object){var v=c[e.type],_=object.isSkinnedMesh?function(object){var t=object.skeleton.bones;if(n.floatVertexTextures)return 1024;var e=n.maxVertexUniforms,r=Math.floor((e-20)/4),o=Math.min(r,t.length);return o<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+o+"."),0):o}(object):0,x=n.precision;null!==e.precision&&(x=n.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",x,"instead.");var y=t.getRenderTarget();return{shaderID:v,precision:x,supportsVertexTextures:n.vertexTextures,outputEncoding:d(y?y.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:d(e.map,t.gammaInput),matcap:!!e.matcap,matcapEncoding:d(e.matcap,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:d(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===o.n||e.envMap.mapping===o.o),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:d(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,objectSpaceNormalMap:e.normalMapType===o.hb,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexTangents:e.normalMap&&e.vertexTangents,vertexColors:e.vertexColors,fog:!!h,useFog:e.fog,fogExp:h&&h.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:e.skinning&&_>0,maxBones:_,useVertexTexture:n.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:r.directional.length,numPointLights:r.point.length,numSpotLights:r.spot.length,numRectAreaLights:r.rectArea.length,numHemiLights:r.hemi.length,numClippingPlanes:f,numClipIntersection:m,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&object.receiveShadow&&l.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===o.v,flipSided:e.side===o.g,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,n){var r=[];if(n.shaderID?r.push(n.shaderID):(r.push(e.fragmentShader),r.push(e.vertexShader)),void 0!==e.defines)for(var o in e.defines)r.push(o),r.push(e.defines[o]);for(var i=0;i<h.length;i++)r.push(n[h[i]]);return r.push(e.onBeforeCompile.toString()),r.push(t.gammaOutput),r.push(t.gammaFactor),r.join()},this.acquireProgram=function(o,c,h,code){for(var d,p=0,f=l.length;p<f;p++){var m=l[p];if(m.code===code){++(d=m).usedTimes;break}}return void 0===d&&(d=new ge(t,e,code,o,c,h,n,r),l.push(d)),d},this.releaseProgram=function(t){if(0==--t.usedTimes){var i=l.indexOf(t);l[i]=l[l.length-1],l.pop(),t.destroy()}},this.programs=l}function _e(){var t=new WeakMap;return{get:function(object){var map=t.get(object);return void 0===map&&(map={},t.set(object,map)),map},remove:function(object){t.delete(object)},update:function(object,e,n){t.get(object)[e]=n},dispose:function(){t=new WeakMap}}}function xe(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function ye(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function be(){var t=[],e=0,n=[],r=[],o={id:-1};function l(object,n,r,l,c,h){var d=t[e];return void 0===d?(d={id:object.id,object:object,geometry:n,material:r,program:r.program||o,groupOrder:l,renderOrder:object.renderOrder,z:c,group:h},t[e]=d):(d.id=object.id,d.object=object,d.geometry=n,d.material=r,d.program=r.program||o,d.groupOrder=l,d.renderOrder=object.renderOrder,d.z=c,d.group=h),e++,d}return{opaque:n,transparent:r,init:function(){e=0,n.length=0,r.length=0},push:function(object,t,e,o,c,h){var d=l(object,t,e,o,c,h);(!0===e.transparent?r:n).push(d)},unshift:function(object,t,e,o,c,h){var d=l(object,t,e,o,c,h);(!0===e.transparent?r:n).unshift(d)},sort:function(){n.length>1&&n.sort(xe),r.length>1&&r.sort(ye)}}}function Me(){var t={};function e(n){var r=n.target;r.removeEventListener("dispose",e),delete t[r.id]}return{get:function(n,r){var o,l=t[n.id];return void 0===l?(o=new be,t[n.id]={},t[n.id][r.id]=o,n.addEventListener("dispose",e)):void 0===(o=l[r.id])&&(o=new be,l[r.id]=o),o},dispose:function(){t={}}}}function Ee(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new E.a,color:new C.a,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new h.a};break;case"SpotLight":n={position:new E.a,direction:new E.a,color:new C.a,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new h.a};break;case"PointLight":n={position:new E.a,color:new C.a,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new h.a,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new E.a,skyColor:new C.a,groundColor:new C.a};break;case"RectAreaLight":n={color:new C.a,position:new E.a,halfWidth:new E.a,halfHeight:new E.a}}return t[e.id]=n,n}}}var we=0;function Te(){for(var t=new Ee,e={id:we++,hash:{stateID:-1,directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,shadowsLength:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},i=0;i<9;i++)e.probe.push(new E.a);var n=new E.a,r=new L.a,o=new L.a;return{setup:function(l,c,h){for(var d=0,g=0,b=0,i=0;i<9;i++)e.probe[i].set(0,0,0);for(var f=0,m=0,v=0,_=0,x=0,y=h.matrixWorldInverse,M=(i=0,l.length);i<M;i++){var E=l[i],w=E.color,T=E.intensity,S=E.distance,L=E.shadow&&E.shadow.map?E.shadow.map.texture:null;if(E.isAmbientLight)d+=w.r*T,g+=w.g*T,b+=w.b*T;else if(E.isLightProbe)for(var A=0;A<9;A++)e.probe[A].addScaledVector(E.sh.coefficients[A],T);else if(E.isDirectionalLight){if((R=t.get(E)).color.copy(E.color).multiplyScalar(E.intensity),R.direction.setFromMatrixPosition(E.matrixWorld),n.setFromMatrixPosition(E.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(y),R.shadow=E.castShadow,E.castShadow){var shadow=E.shadow;R.shadowBias=shadow.bias,R.shadowRadius=shadow.radius,R.shadowMapSize=shadow.mapSize}e.directionalShadowMap[f]=L,e.directionalShadowMatrix[f]=E.shadow.matrix,e.directional[f]=R,f++}else if(E.isSpotLight)(R=t.get(E)).position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(y),R.color.copy(w).multiplyScalar(T),R.distance=S,R.direction.setFromMatrixPosition(E.matrixWorld),n.setFromMatrixPosition(E.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(y),R.coneCos=Math.cos(E.angle),R.penumbraCos=Math.cos(E.angle*(1-E.penumbra)),R.decay=E.decay,R.shadow=E.castShadow,E.castShadow&&(shadow=E.shadow,R.shadowBias=shadow.bias,R.shadowRadius=shadow.radius,R.shadowMapSize=shadow.mapSize),e.spotShadowMap[v]=L,e.spotShadowMatrix[v]=E.shadow.matrix,e.spot[v]=R,v++;else if(E.isRectAreaLight)(R=t.get(E)).color.copy(w).multiplyScalar(T),R.position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(y),o.identity(),r.copy(E.matrixWorld),r.premultiply(y),o.extractRotation(r),R.halfWidth.set(.5*E.width,0,0),R.halfHeight.set(0,.5*E.height,0),R.halfWidth.applyMatrix4(o),R.halfHeight.applyMatrix4(o),e.rectArea[_]=R,_++;else if(E.isPointLight)(R=t.get(E)).position.setFromMatrixPosition(E.matrixWorld),R.position.applyMatrix4(y),R.color.copy(E.color).multiplyScalar(E.intensity),R.distance=E.distance,R.decay=E.decay,R.shadow=E.castShadow,E.castShadow&&(shadow=E.shadow,R.shadowBias=shadow.bias,R.shadowRadius=shadow.radius,R.shadowMapSize=shadow.mapSize,R.shadowCameraNear=shadow.camera.near,R.shadowCameraFar=shadow.camera.far),e.pointShadowMap[m]=L,e.pointShadowMatrix[m]=E.shadow.matrix,e.point[m]=R,m++;else if(E.isHemisphereLight){var R;(R=t.get(E)).direction.setFromMatrixPosition(E.matrixWorld),R.direction.transformDirection(y),R.direction.normalize(),R.skyColor.copy(E.color).multiplyScalar(T),R.groundColor.copy(E.groundColor).multiplyScalar(T),e.hemi[x]=R,x++}}e.ambient[0]=d,e.ambient[1]=g,e.ambient[2]=b,e.directional.length=f,e.spot.length=v,e.rectArea.length=_,e.point.length=m,e.hemi.length=x,e.hash.stateID=e.id,e.hash.directionalLength=f,e.hash.pointLength=m,e.hash.spotLength=v,e.hash.rectAreaLength=_,e.hash.hemiLength=x,e.hash.shadowsLength=c.length},state:e}}function Se(){var t=new Te,e=[],n=[];return{init:function(){e.length=0,n.length=0},state:{lightsArray:e,shadowsArray:n,lights:t},setupLights:function(r){t.setup(e,n,r)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)}}}function Le(){var t={};function e(n){var r=n.target;r.removeEventListener("dispose",e),delete t[r.id]}return{get:function(n,r){var o;return void 0===t[n.id]?(o=new Se,t[n.id]={},t[n.id][r.id]=o,n.addEventListener("dispose",e)):void 0===t[n.id][r.id]?(o=new Se,t[n.id][r.id]=o):o=t[n.id][r.id],o},dispose:function(){t={}}}}function Ae(t,e,n){this.width=t,this.height=e,this.scissor=new U.a(0,0,t,e),this.scissorTest=!1,this.viewport=new U.a(0,0,t,e),n=n||{},this.texture=new v(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:o.M,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Re(t){k.a.call(this),this.type="MeshDepthMaterial",this.depthPacking=o.h,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function Pe(t){k.a.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new E.a,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function Ce(t,e,n){for(var r=new S,l=new L.a,c=new h.a,d=new h.a(n,n),f=new E.a,m=new E.a,v=1,_=2,x=1+(v|_),y=new Array(x),M=new Array(x),w={},T={0:o.g,1:o.D,2:o.v},A=[new E.a(1,0,0),new E.a(-1,0,0),new E.a(0,0,1),new E.a(0,0,-1),new E.a(0,1,0),new E.a(0,-1,0)],R=[new E.a(0,1,0),new E.a(0,1,0),new E.a(0,1,0),new E.a(0,1,0),new E.a(0,0,1),new E.a(0,0,-1)],P=[new U.a,new U.a,new U.a,new U.a,new U.a,new U.a],i=0;i!==x;++i){var C=0!=(i&v),D=0!=(i&_),N=new Re({depthPacking:o.qb,morphTargets:C,skinning:D});y[i]=N;var I=new Pe({morphTargets:C,skinning:D});M[i]=I}var F=this;function z(object,e,n,r,o,l){var c=object.geometry,h=null,d=y,f=object.customDepthMaterial;if(n&&(d=M,f=object.customDistanceMaterial),f)h=f;else{var m=!1;e.morphTargets&&(c&&c.isBufferGeometry?m=c.morphAttributes&&c.morphAttributes.position&&c.morphAttributes.position.length>0:c&&c.isGeometry&&(m=c.morphTargets&&c.morphTargets.length>0)),object.isSkinnedMesh&&!1===e.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",object);var x=object.isSkinnedMesh&&e.skinning,E=0;m&&(E|=v),x&&(E|=_),h=d[E]}if(t.localClippingEnabled&&!0===e.clipShadows&&0!==e.clippingPlanes.length){var S=h.uuid,L=e.uuid,A=w[S];void 0===A&&(A={},w[S]=A);var R=A[L];void 0===R&&(R=h.clone(),A[L]=R),h=R}return h.visible=e.visible,h.wireframe=e.wireframe,h.side=null!=e.shadowSide?e.shadowSide:T[e.side],h.clipShadows=e.clipShadows,h.clippingPlanes=e.clippingPlanes,h.clipIntersection=e.clipIntersection,h.wireframeLinewidth=e.wireframeLinewidth,h.linewidth=e.linewidth,n&&h.isMeshDistanceMaterial&&(h.referencePosition.copy(r),h.nearDistance=o,h.farDistance=l),h}function O(object,n,o,l){if(!1!==object.visible){if(object.layers.test(n.layers)&&(object.isMesh||object.isLine||object.isPoints)&&object.castShadow&&(!object.frustumCulled||r.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,object.matrixWorld);var c=e.update(object),h=object.material;if(Array.isArray(h))for(var d=c.groups,f=0,v=d.length;f<v;f++){var _=d[f],x=h[_.materialIndex];if(x&&x.visible){var y=z(object,x,l,m,o.near,o.far);t.renderBufferDirect(o,null,c,y,object,_)}}else if(h.visible){y=z(object,h,l,m,o.near,o.far);t.renderBufferDirect(o,null,c,y,object,null)}}for(var M=object.children,i=0,E=M.length;i<E;i++)O(M[i],n,o,l)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=o.nb,this.render=function(e,n,h){if(!1!==F.enabled&&(!1!==F.autoUpdate||!1!==F.needsUpdate)&&0!==e.length){var v,_=t.getRenderTarget(),x=t.getActiveCubeFace(),y=t.getActiveMipMapLevel(),M=t.state;M.setBlending(o.cb),M.buffers.color.setClear(1,1,1,1),M.buffers.depth.setTest(!0),M.setScissorTest(!1);for(var i=0,E=e.length;i<E;i++){var w=e[i],shadow=w.shadow,T=w&&w.isPointLight;if(void 0!==shadow){var S=shadow.camera;if(c.copy(shadow.mapSize),c.min(d),T){var L=c.x,C=c.y;P[0].set(2*L,C,L,C),P[1].set(0,C,L,C),P[2].set(3*L,C,L,C),P[3].set(L,C,L,C),P[4].set(3*L,0,L,C),P[5].set(L,0,L,C),c.x*=4,c.y*=2}if(null===shadow.map){var D={minFilter:o.Y,magFilter:o.Y,format:o.rb};shadow.map=new Ae(c.x,c.y,D),shadow.map.texture.name=w.name+".shadowMap",S.updateProjectionMatrix()}shadow.isSpotLightShadow&&shadow.update(w);var N=shadow.map,U=shadow.matrix;m.setFromMatrixPosition(w.matrixWorld),S.position.copy(m),T?(v=6,U.makeTranslation(-m.x,-m.y,-m.z)):(v=1,f.setFromMatrixPosition(w.target.matrixWorld),S.lookAt(f),S.updateMatrixWorld(),U.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),U.multiply(S.projectionMatrix),U.multiply(S.matrixWorldInverse)),t.setRenderTarget(N),t.clear();for(var I=0;I<v;I++){if(T){f.copy(S.position),f.add(A[I]),S.up.copy(R[I]),S.lookAt(f),S.updateMatrixWorld();var z=P[I];M.viewport(z)}l.multiplyMatrices(S.projectionMatrix,S.matrixWorldInverse),r.setFromMatrix(l),O(n,h,S,T)}}else console.warn("THREE.WebGLShadowMap:",w,"has no shadow.")}F.needsUpdate=!1,t.setRenderTarget(_,x,y)}}}function De(t,e,n,r){var l=new function(){var e=!1,n=new U.a,r=null,o=new U.a(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,g,b,a,r){!0===r&&(e*=a,g*=a,b*=a),n.set(e,g,b,a),!1===o.equals(n)&&(t.clearColor(e,g,b,a),o.copy(n))},reset:function(){e=!1,r=null,o.set(-1,0,0,0)}}},c=new function(){var e=!1,n=null,r=null,l=null;return{setTest:function(e){e?Z(t.DEPTH_TEST):J(t.DEPTH_TEST)},setMask:function(r){n===r||e||(t.depthMask(r),n=r)},setFunc:function(e){if(r!==e){if(e)switch(e){case o.bb:t.depthFunc(t.NEVER);break;case o.f:t.depthFunc(t.ALWAYS);break;case o.J:t.depthFunc(t.LESS);break;case o.K:t.depthFunc(t.LEQUAL);break;case o.y:t.depthFunc(t.EQUAL);break;case o.G:t.depthFunc(t.GEQUAL);break;case o.F:t.depthFunc(t.GREATER);break;case o.gb:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}else t.depthFunc(t.LEQUAL);r=e}},setLocked:function(t){e=t},setClear:function(e){l!==e&&(t.clearDepth(e),l=e)},reset:function(){e=!1,n=null,r=null,l=null}}},h=new function(){var e=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null;return{setTest:function(e){e?Z(t.STENCIL_TEST):J(t.STENCIL_TEST)},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,c){r===e&&o===n&&l===c||(t.stencilFunc(e,n,c),r=e,o=n,l=c)},setOp:function(e,n,r){c===e&&h===n&&d===r||(t.stencilOp(e,n,r),c=e,h=n,d=r)},setLocked:function(t){e=t},setClear:function(e){f!==e&&(t.clearStencil(e),f=e)},reset:function(){e=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null}}},d=t.getParameter(t.MAX_VERTEX_ATTRIBS),f=new Uint8Array(d),m=new Uint8Array(d),v=new Uint8Array(d),_={},x=null,y=null,M=null,E=null,w=null,T=null,S=null,L=null,A=null,R=null,P=!1,C=null,D=null,N=null,I=null,F=null,z=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),O=!1,B=0,G=t.getParameter(t.VERSION);-1!==G.indexOf("WebGL")?(B=parseFloat(/^WebGL\ ([0-9])/.exec(G)[1]),O=B>=1):-1!==G.indexOf("OpenGL ES")&&(B=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(G)[1]),O=B>=2);var V=null,H={},k=new U.a,W=new U.a;function X(e,n,r){var data=new Uint8Array(4),o=t.createTexture();t.bindTexture(e,o),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(var i=0;i<r;i++)t.texImage2D(n+i,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,data);return o}var j={};function Y(n,o){(f[n]=1,0===m[n]&&(t.enableVertexAttribArray(n),m[n]=1),v[n]!==o)&&((r.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[r.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,o),v[n]=o)}function Z(e){!0!==_[e]&&(t.enable(e),_[e]=!0)}function J(e){!1!==_[e]&&(t.disable(e),_[e]=!1)}function Q(e,r,l,c,h,d,f,m){if(e!==o.cb){if(M||(Z(t.BLEND),M=!0),e===o.s)h=h||r,d=d||l,f=f||c,r===w&&h===L||(t.blendEquationSeparate(n.convert(r),n.convert(h)),w=r,L=h),l===T&&c===S&&d===A&&f===R||(t.blendFuncSeparate(n.convert(l),n.convert(c),n.convert(d),n.convert(f)),T=l,S=c,A=d,R=f),E=e,P=null;else if(e!==E||m!==P){if(w===o.b&&L===o.b||(t.blendEquation(t.FUNC_ADD),w=o.b,L=o.b),m)switch(e){case o.fb:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case o.d:t.blendFunc(t.ONE,t.ONE);break;case o.ec:t.blendFuncSeparate(t.ZERO,t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ONE_MINUS_SRC_ALPHA);break;case o.W:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case o.fb:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case o.d:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case o.ec:t.blendFunc(t.ZERO,t.ONE_MINUS_SRC_COLOR);break;case o.W:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}T=null,S=null,A=null,R=null,E=e,P=m}}else M&&(J(t.BLEND),M=!1)}function K(e){C!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),C=e)}function $(e){e!==o.r?(Z(t.CULL_FACE),e!==D&&(e===o.p?t.cullFace(t.BACK):e===o.q?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):J(t.CULL_FACE),D=e}function tt(e,n,r){e?(Z(t.POLYGON_OFFSET_FILL),I===n&&F===r||(t.polygonOffset(n,r),I=n,F=r)):J(t.POLYGON_OFFSET_FILL)}function et(e){void 0===e&&(e=t.TEXTURE0+z-1),V!==e&&(t.activeTexture(e),V=e)}return j[t.TEXTURE_2D]=X(t.TEXTURE_2D,t.TEXTURE_2D,1),j[t.TEXTURE_CUBE_MAP]=X(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),l.setClear(0,0,0,1),c.setClear(1),h.setClear(0),Z(t.DEPTH_TEST),c.setFunc(o.K),K(!1),$(o.p),Z(t.CULL_FACE),Q(o.cb),{buffers:{color:l,depth:c,stencil:h},initAttributes:function(){for(var i=0,t=f.length;i<t;i++)f[i]=0},enableAttribute:function(t){Y(t,0)},enableAttributeAndDivisor:Y,disableUnusedAttributes:function(){for(var i=0,e=m.length;i!==e;++i)m[i]!==f[i]&&(t.disableVertexAttribArray(i),m[i]=0)},enable:Z,disable:J,getCompressedTextureFormats:function(){if(null===x&&(x=[],e.get("WEBGL_compressed_texture_pvrtc")||e.get("WEBGL_compressed_texture_s3tc")||e.get("WEBGL_compressed_texture_etc1")||e.get("WEBGL_compressed_texture_astc")))for(var n=t.getParameter(t.COMPRESSED_TEXTURE_FORMATS),i=0;i<n.length;i++)x.push(n[i]);return x},useProgram:function(e){return y!==e&&(t.useProgram(e),y=e,!0)},setBlending:Q,setMaterial:function(e,n){e.side===o.v?J(t.CULL_FACE):Z(t.CULL_FACE);var r=e.side===o.g;n&&(r=!r),K(r),e.blending===o.fb&&!1===e.transparent?Q(o.cb):Q(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),c.setFunc(e.depthFunc),c.setTest(e.depthTest),c.setMask(e.depthWrite),l.setMask(e.colorWrite),tt(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:K,setCullFace:$,setLineWidth:function(e){e!==N&&(O&&t.lineWidth(e),N=e)},setPolygonOffset:tt,setScissorTest:function(e){e?Z(t.SCISSOR_TEST):J(t.SCISSOR_TEST)},activeTexture:et,bindTexture:function(e,n){null===V&&et();var r=H[V];void 0===r&&(r={type:void 0,texture:void 0},H[V]=r),r.type===e&&r.texture===n||(t.bindTexture(e,n||j[e]),r.type=e,r.texture=n)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===k.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),k.copy(e))},viewport:function(e){!1===W.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),W.copy(e))},reset:function(){for(var i=0;i<m.length;i++)1===m[i]&&(t.disableVertexAttribArray(i),m[i]=0);_={},x=null,V=null,H={},y=null,E=null,C=null,D=null,l.reset(),c.reset(),h.reset()}}}function Ne(t,e,n,r,c,h,d){var f,m={},v="undefined"!=typeof OffscreenCanvas;function _(t,e){return v?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function x(image,t,e,n){var r=1;if((image.width>n||image.height>n)&&(r=n/Math.max(image.width,image.height)),r<1||!0===t){if("undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap){var o=t?l.a.floorPowerOfTwo:Math.floor,c=o(r*image.width),h=o(r*image.height);void 0===f&&(f=_(c,h));var canvas=e?_(c,h):f;return canvas.width=c,canvas.height=h,canvas.getContext("2d").drawImage(image,0,0,c,h),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+image.width+"x"+image.height+") to ("+c+"x"+h+")."),canvas}return"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+image.width+"x"+image.height+")."),image}return image}function y(image){return l.a.isPowerOfTwo(image.width)&&l.a.isPowerOfTwo(image.height)}function M(t,e){return t.generateMipmaps&&e&&t.minFilter!==o.Y&&t.minFilter!==o.M}function E(e,n,o,l){t.generateMipmap(e),r.get(n).__maxMipLevel=Math.log(Math.max(o,l))*Math.LOG2E}function w(n,r){if(!c.isWebGL2)return n;var o=n;return n===t.RED&&(r===t.FLOAT&&(o=t.R32F),r===t.HALF_FLOAT&&(o=t.R16F),r===t.UNSIGNED_BYTE&&(o=t.R8)),n===t.RGB&&(r===t.FLOAT&&(o=t.RGB32F),r===t.HALF_FLOAT&&(o=t.RGB16F),r===t.UNSIGNED_BYTE&&(o=t.RGB8)),n===t.RGBA&&(r===t.FLOAT&&(o=t.RGBA32F),r===t.HALF_FLOAT&&(o=t.RGBA16F),r===t.UNSIGNED_BYTE&&(o=t.RGBA8)),o===t.R16F||o===t.R32F||o===t.RGBA16F||o===t.RGBA32F?e.get("EXT_color_buffer_float"):o!==t.RGB16F&&o!==t.RGB32F||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),o}function T(e){return e===o.Y||e===o.ab||e===o.Z?t.NEAREST:t.LINEAR}function S(e){var n=e.target;n.removeEventListener("dispose",S),function(e){var n=r.get(e);if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture),r.remove(e)}(n),n.isVideoTexture&&delete m[n.id],d.memory.textures--}function L(e){var n=e.target;n.removeEventListener("dispose",L),function(e){var n=r.get(e),o=r.get(e.texture);if(!e)return;void 0!==o.__webglTexture&&t.deleteTexture(o.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var i=0;i<6;i++)t.deleteFramebuffer(n.__webglFramebuffer[i]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[i]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer);r.remove(e.texture),r.remove(e)}(n),d.memory.textures--}var A=0;function R(e,slot){var o=r.get(e);if(e.isVideoTexture&&function(t){var e=t.id,n=d.render.frame;m[e]!==n&&(m[e]=n,t.update())}(e),e.version>0&&o.__version!==e.version){var image=e.image;if(void 0===image)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==image.complete)return void U(o,e,slot);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_2D,o.__webglTexture)}function P(e,slot){var l=r.get(e);if(6===e.image.length)if(e.version>0&&l.__version!==e.version){N(l,e),n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,e.flipY);for(var d=e&&e.isCompressedTexture,f=e.image[0]&&e.image[0].isDataTexture,m=[],i=0;i<6;i++)m[i]=d||f?f?e.image[i].image:e.image[i]:x(e.image[i],!1,!0,c.maxCubemapSize);var image=m[0],v=y(image)||c.isWebGL2,_=h.convert(e.format),T=h.convert(e.type),S=w(_,T);D(t.TEXTURE_CUBE_MAP,e,v);for(i=0;i<6;i++)if(d)for(var L,A=m[i].mipmaps,R=0,P=A.length;R<P;R++)L=A[R],e.format!==o.rb&&e.format!==o.Nb?n.getCompressedTextureFormats().indexOf(_)>-1?n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,R,S,L.width,L.height,0,L.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,R,S,L.width,L.height,0,_,T,L.data);else f?n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,S,m[i].width,m[i].height,0,_,T,m[i].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,S,_,T,m[i]);l.__maxMipLevel=d?A.length-1:0,M(e,v)&&E(t.TEXTURE_CUBE_MAP,e,image.width,image.height),l.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture)}function C(e,slot){n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_CUBE_MAP,r.get(e).__webglTexture)}function D(n,l,d){var f;if(d?(t.texParameteri(n,t.TEXTURE_WRAP_S,h.convert(l.wrapS)),t.texParameteri(n,t.TEXTURE_WRAP_T,h.convert(l.wrapT)),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,h.convert(l.wrapR)),t.texParameteri(n,t.TEXTURE_MAG_FILTER,h.convert(l.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,h.convert(l.minFilter))):(t.texParameteri(n,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(n,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,t.CLAMP_TO_EDGE),l.wrapS===o.k&&l.wrapT===o.k||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,t.TEXTURE_MAG_FILTER,T(l.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,T(l.minFilter)),l.minFilter!==o.Y&&l.minFilter!==o.M&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),f=e.get("EXT_texture_filter_anisotropic")){if(l.type===o.C&&null===e.get("OES_texture_float_linear"))return;if(l.type===o.H&&null===(c.isWebGL2||e.get("OES_texture_half_float_linear")))return;(l.anisotropy>1||r.get(l).__currentAnisotropy)&&(t.texParameterf(n,f.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(l.anisotropy,c.getMaxAnisotropy())),r.get(l).__currentAnisotropy=l.anisotropy)}}function N(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",S),e.__webglTexture=t.createTexture(),d.memory.textures++)}function U(e,r,slot){var l=t.TEXTURE_2D;r.isDataTexture2DArray&&(l=t.TEXTURE_2D_ARRAY),r.isDataTexture3D&&(l=t.TEXTURE_3D),N(e,r),n.activeTexture(t.TEXTURE0+slot),n.bindTexture(l,e.__webglTexture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,r.unpackAlignment);var d=function(t){return!c.isWebGL2&&(t.wrapS!==o.k||t.wrapT!==o.k||t.minFilter!==o.Y&&t.minFilter!==o.M)}(r)&&!1===y(r.image),image=x(r.image,d,!1,c.maxTextureSize),f=y(image)||c.isWebGL2,m=h.convert(r.format),v=h.convert(r.type),_=w(m,v);D(l,r,f);var T,S=r.mipmaps;if(r.isDepthTexture){if(_=t.DEPTH_COMPONENT,r.type===o.C){if(!c.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");_=t.DEPTH_COMPONENT32F}else c.isWebGL2&&(_=t.DEPTH_COMPONENT16);r.format===o.t&&_===t.DEPTH_COMPONENT&&r.type!==o.rc&&r.type!==o.nc&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=o.rc,v=h.convert(r.type)),r.format===o.u&&(_=t.DEPTH_STENCIL,r.type!==o.mc&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=o.mc,v=h.convert(r.type))),n.texImage2D(t.TEXTURE_2D,0,_,image.width,image.height,0,m,v,null)}else if(r.isDataTexture)if(S.length>0&&f){for(var i=0,L=S.length;i<L;i++)T=S[i],n.texImage2D(t.TEXTURE_2D,i,_,T.width,T.height,0,m,v,T.data);r.generateMipmaps=!1,e.__maxMipLevel=S.length-1}else n.texImage2D(t.TEXTURE_2D,0,_,image.width,image.height,0,m,v,image.data),e.__maxMipLevel=0;else if(r.isCompressedTexture){for(i=0,L=S.length;i<L;i++)T=S[i],r.format!==o.rb&&r.format!==o.Nb?n.getCompressedTextureFormats().indexOf(m)>-1?n.compressedTexImage2D(t.TEXTURE_2D,i,_,T.width,T.height,0,T.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(t.TEXTURE_2D,i,_,T.width,T.height,0,m,v,T.data);e.__maxMipLevel=S.length-1}else if(r.isDataTexture2DArray)n.texImage3D(t.TEXTURE_2D_ARRAY,0,_,image.width,image.height,image.depth,0,m,v,image.data),e.__maxMipLevel=0;else if(r.isDataTexture3D)n.texImage3D(t.TEXTURE_3D,0,_,image.width,image.height,image.depth,0,m,v,image.data),e.__maxMipLevel=0;else if(S.length>0&&f){for(i=0,L=S.length;i<L;i++)T=S[i],n.texImage2D(t.TEXTURE_2D,i,_,m,v,T);r.generateMipmaps=!1,e.__maxMipLevel=S.length-1}else n.texImage2D(t.TEXTURE_2D,0,_,m,v,image),e.__maxMipLevel=0;M(r,f)&&E(t.TEXTURE_2D,r,image.width,image.height),e.__version=r.version,r.onUpdate&&r.onUpdate(r)}function I(e,o,l,c){var d=h.convert(o.texture.format),f=h.convert(o.texture.type),m=w(d,f);n.texImage2D(c,0,m,o.width,o.height,0,d,f,null),t.bindFramebuffer(t.FRAMEBUFFER,e),t.framebufferTexture2D(t.FRAMEBUFFER,l,c,r.get(o.texture).__webglTexture,0),t.bindFramebuffer(t.FRAMEBUFFER,null)}function F(e,n,r){if(t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer&&!n.stencilBuffer){if(r){var o=O(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,t.DEPTH_COMPONENT16,n.width,n.height)}else t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,n.width,n.height);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,e)}else if(n.depthBuffer&&n.stencilBuffer){if(r){o=O(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,t.DEPTH_STENCIL,n.width,n.height)}else t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,n.width,n.height);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,e)}else{var l=w(h.convert(n.texture.format),h.convert(n.texture.type));if(r){o=O(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l,n.width,n.height)}else t.renderbufferStorage(t.RENDERBUFFER,l,n.width,n.height)}t.bindRenderbuffer(t.RENDERBUFFER,null)}function z(e){var n=r.get(e),l=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(l)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(t.FRAMEBUFFER,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),R(n.depthTexture,0);var l=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===o.t)t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,l,0);else{if(n.depthTexture.format!==o.u)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,l,0)}}(n.__webglFramebuffer,e)}else if(l){n.__webglDepthbuffer=[];for(var i=0;i<6;i++)t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer[i]),n.__webglDepthbuffer[i]=t.createRenderbuffer(),F(n.__webglDepthbuffer[i],e)}else t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),F(n.__webglDepthbuffer,e);t.bindFramebuffer(t.FRAMEBUFFER,null)}function O(t){return c.isWebGL2&&t.isWebGLMultisampleRenderTarget?Math.min(c.maxSamples,t.samples):0}var B=!1,G=!1;this.allocateTextureUnit=function(){var t=A;return t>=c.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+c.maxTextures),A+=1,t},this.resetTextureUnits=function(){A=0},this.setTexture2D=R,this.setTexture2DArray=function(e,slot){var o=r.get(e);e.version>0&&o.__version!==e.version?U(o,e,slot):(n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_2D_ARRAY,o.__webglTexture))},this.setTexture3D=function(e,slot){var o=r.get(e);e.version>0&&o.__version!==e.version?U(o,e,slot):(n.activeTexture(t.TEXTURE0+slot),n.bindTexture(t.TEXTURE_3D,o.__webglTexture))},this.setTextureCube=P,this.setTextureCubeDynamic=C,this.setupRenderTarget=function(e){var o=r.get(e),l=r.get(e.texture);e.addEventListener("dispose",L),l.__webglTexture=t.createTexture(),d.memory.textures++;var f=!0===e.isWebGLRenderTargetCube,m=!0===e.isWebGLMultisampleRenderTarget,v=y(e)||c.isWebGL2;if(f){o.__webglFramebuffer=[];for(var i=0;i<6;i++)o.__webglFramebuffer[i]=t.createFramebuffer()}else if(o.__webglFramebuffer=t.createFramebuffer(),m)if(c.isWebGL2){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,o.__webglColorRenderbuffer);var _=w(h.convert(e.texture.format),h.convert(e.texture.type)),x=O(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,x,_,e.width,e.height),t.bindFramebuffer(t.FRAMEBUFFER,o.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,o.__webglColorRenderbuffer),t.bindRenderbuffer(t.RENDERBUFFER,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),F(o.__webglDepthRenderbuffer,e,!0)),t.bindFramebuffer(t.FRAMEBUFFER,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(f){for(n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture),D(t.TEXTURE_CUBE_MAP,e.texture,v),i=0;i<6;i++)I(o.__webglFramebuffer[i],e,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+i);M(e.texture,v)&&E(t.TEXTURE_CUBE_MAP,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_CUBE_MAP,null)}else n.bindTexture(t.TEXTURE_2D,l.__webglTexture),D(t.TEXTURE_2D,e.texture,v),I(o.__webglFramebuffer,e,t.COLOR_ATTACHMENT0,t.TEXTURE_2D),M(e.texture,v)&&E(t.TEXTURE_2D,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_2D,null);e.depthBuffer&&z(e)},this.updateRenderTargetMipmap=function(e){var o=e.texture;if(M(o,y(e)||c.isWebGL2)){var l=e.isWebGLRenderTargetCube?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,h=r.get(o).__webglTexture;n.bindTexture(l,h),E(l,o,e.width,e.height),n.bindTexture(l,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(c.isWebGL2){var n=r.get(e);t.bindFramebuffer(t.READ_FRAMEBUFFER,n.__webglMultisampledFramebuffer),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,n.__webglFramebuffer);var o=e.width,l=e.height,mask=t.COLOR_BUFFER_BIT;e.depthBuffer&&(mask|=t.DEPTH_BUFFER_BIT),e.stencilBuffer&&(mask|=t.STENCIL_BUFFER_BIT),t.blitFramebuffer(0,0,o,l,0,0,o,l,mask,t.NEAREST)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,slot){t&&t.isWebGLRenderTarget&&(!1===B&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),B=!0),t=t.texture),R(t,slot)},this.safeSetTextureCube=function(t,slot){t&&t.isWebGLRenderTargetCube&&(!1===G&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),G=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?P(t,slot):C(t,slot)}}function Ue(t,e,n){return{convert:function(p){var r;if(p===o.Wb)return t.REPEAT;if(p===o.k)return t.CLAMP_TO_EDGE;if(p===o.U)return t.MIRRORED_REPEAT;if(p===o.Y)return t.NEAREST;if(p===o.ab)return t.NEAREST_MIPMAP_NEAREST;if(p===o.Z)return t.NEAREST_MIPMAP_LINEAR;if(p===o.M)return t.LINEAR;if(p===o.O)return t.LINEAR_MIPMAP_NEAREST;if(p===o.N)return t.LINEAR_MIPMAP_LINEAR;if(p===o.lc)return t.UNSIGNED_BYTE;if(p===o.oc)return t.UNSIGNED_SHORT_4_4_4_4;if(p===o.pc)return t.UNSIGNED_SHORT_5_5_5_1;if(p===o.qc)return t.UNSIGNED_SHORT_5_6_5;if(p===o.i)return t.BYTE;if(p===o.Yb)return t.SHORT;if(p===o.rc)return t.UNSIGNED_SHORT;if(p===o.I)return t.INT;if(p===o.nc)return t.UNSIGNED_INT;if(p===o.C)return t.FLOAT;if(p===o.H){if(n.isWebGL2)return t.HALF_FLOAT;if(null!==(r=e.get("OES_texture_half_float")))return r.HALF_FLOAT_OES}if(p===o.e)return t.ALPHA;if(p===o.Nb)return t.RGB;if(p===o.rb)return t.RGBA;if(p===o.R)return t.LUMINANCE;if(p===o.Q)return t.LUMINANCE_ALPHA;if(p===o.t)return t.DEPTH_COMPONENT;if(p===o.u)return t.DEPTH_STENCIL;if(p===o.Ub)return t.RED;if(p===o.b)return t.FUNC_ADD;if(p===o.dc)return t.FUNC_SUBTRACT;if(p===o.Xb)return t.FUNC_REVERSE_SUBTRACT;if(p===o.sc)return t.ZERO;if(p===o.ib)return t.ONE;if(p===o.cc)return t.SRC_COLOR;if(p===o.mb)return t.ONE_MINUS_SRC_COLOR;if(p===o.ac)return t.SRC_ALPHA;if(p===o.lb)return t.ONE_MINUS_SRC_ALPHA;if(p===o.w)return t.DST_ALPHA;if(p===o.jb)return t.ONE_MINUS_DST_ALPHA;if(p===o.x)return t.DST_COLOR;if(p===o.kb)return t.ONE_MINUS_DST_COLOR;if(p===o.bc)return t.SRC_ALPHA_SATURATE;if((p===o.Tb||p===o.Ib||p===o.Jb||p===o.Kb)&&null!==(r=e.get("WEBGL_compressed_texture_s3tc"))){if(p===o.Tb)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===o.Ib)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===o.Jb)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===o.Kb)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((p===o.Sb||p===o.Rb||p===o.Hb||p===o.Gb)&&null!==(r=e.get("WEBGL_compressed_texture_pvrtc"))){if(p===o.Sb)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===o.Rb)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===o.Hb)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===o.Gb)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(p===o.Qb&&null!==(r=e.get("WEBGL_compressed_texture_etc1")))return r.COMPRESSED_RGB_ETC1_WEBGL;if((p===o.yb||p===o.zb||p===o.Ab||p===o.Bb||p===o.Cb||p===o.Db||p===o.Eb||p===o.Fb||p===o.tb||p===o.ub||p===o.vb||p===o.sb||p===o.wb||p===o.xb)&&null!==(r=e.get("WEBGL_compressed_texture_astc")))return p;if(p===o.T||p===o.S){if(n.isWebGL2){if(p===o.T)return t.MIN;if(p===o.S)return t.MAX}if(null!==(r=e.get("EXT_blend_minmax"))){if(p===o.T)return r.MIN_EXT;if(p===o.S)return r.MAX_EXT}}if(p===o.mc){if(n.isWebGL2)return t.UNSIGNED_INT_24_8;if(null!==(r=e.get("WEBGL_depth_texture")))return r.UNSIGNED_INT_24_8_WEBGL}return 0}}}Ae.prototype=Object.assign(Object.create(c.a.prototype),{constructor:Ae,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(source){return this.width=source.width,this.height=source.height,this.viewport.copy(source.viewport),this.texture=source.texture.clone(),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,this.depthTexture=source.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Re.prototype=Object.create(k.a.prototype),Re.prototype.constructor=Re,Re.prototype.isMeshDepthMaterial=!0,Re.prototype.copy=function(source){return k.a.prototype.copy.call(this,source),this.depthPacking=source.depthPacking,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this},Pe.prototype=Object.create(k.a.prototype),Pe.prototype.constructor=Pe,Pe.prototype.isMeshDistanceMaterial=!0,Pe.prototype.copy=function(source){return k.a.prototype.copy.call(this,source),this.referencePosition.copy(source.referencePosition),this.nearDistance=source.nearDistance,this.farDistance=source.farDistance,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this};var Ie=n(170);function Fe(){Ie.a.call(this),this.type="Group"}Fe.prototype=Object.assign(Object.create(Ie.a.prototype),{constructor:Fe,isGroup:!0});var ze=n(175),Oe=n(164);function Be(t){Oe.a.call(this),this.cameras=t||[]}Be.prototype=Object.assign(Object.create(Oe.a.prototype),{constructor:Be,isArrayCamera:!0});var Ge=new E.a,Ve=new E.a;function He(t,e,n){Ge.setFromMatrixPosition(e.matrixWorld),Ve.setFromMatrixPosition(n.matrixWorld);var r=Ge.distanceTo(Ve),o=e.projectionMatrix.elements,l=n.projectionMatrix.elements,c=o[14]/(o[10]-1),h=o[14]/(o[10]+1),d=(o[9]+1)/o[5],f=(o[9]-1)/o[5],m=(o[8]-1)/o[0],v=(l[8]+1)/l[0],_=c*m,x=c*v,y=r/(-m+v),M=y*-m;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(M),t.translateZ(y),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var E=c+y,w=h+y,T=_-M,S=x+(r-M),L=d*h/w*E,A=f*h/w*E;t.projectionMatrix.makePerspective(T,S,L,A,E,w)}function ke(t){var e,n,r=this,o=null,l=null,c=null,d=[],f=new L.a,m=new L.a,v=1,_="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(l=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",C,!1));var x=new L.a,y=new ze.a,M=new E.a,w=new Oe.a;w.viewport=new U.a,w.layers.enable(1);var T=new Oe.a;T.viewport=new U.a,T.layers.enable(2);var S=new Be([w,T]);function A(){return null!==o&&!0===o.isPresenting}S.layers.enable(1),S.layers.enable(2);var R,P=new h.a;function C(){if(A()){var l=o.getEyeParameters("left");e=2*l.renderWidth*v,n=l.renderHeight*v,R=t.getPixelRatio(),t.getSize(P),t.setDrawingBufferSize(e,n,1),w.viewport.set(0,0,e/2,n),T.viewport.set(e/2,0,e/2,n),z.start()}else r.enabled&&t.setDrawingBufferSize(P.width,P.height,R),z.stop()}var D=[];function N(t){for(var e=navigator.getGamepads&&navigator.getGamepads(),i=0,n=0,r=e.length;i<r;i++){var o=e[i];if(o&&("Daydream Controller"===o.id||"Gear VR Controller"===o.id||"Oculus Go Controller"===o.id||"OpenVR Gamepad"===o.id||o.id.startsWith("Oculus Touch")||o.id.startsWith("Spatial Controller"))){if(n===t)return o;n++}}}function F(t,r){null!==r&&4===r.length&&t.set(r[0]*e,r[1]*n,r[2]*e,r[3]*n)}this.enabled=!1,this.getController=function(t){var e=d[t];return void 0===e&&((e=new Fe).matrixAutoUpdate=!1,e.visible=!1,d[t]=e),e},this.getDevice=function(){return o},this.setDevice=function(t){void 0!==t&&(o=t),z.setContext(t)},this.setFramebufferScaleFactor=function(t){v=t},this.setReferenceSpaceType=function(t){_=t},this.setPoseTarget=function(object){void 0!==object&&(c=object)},this.getCamera=function(t){var e="local-floor"===_?1.6:0;if(!1===A())return t.position.set(0,e,0),t.rotation.set(0,0,0),t;if(o.depthNear=t.near,o.depthFar=t.far,o.getFrameData(l),"local-floor"===_){var n=o.stageParameters;n?f.fromArray(n.sittingToStandingTransform):f.makeTranslation(0,e,0)}var r=l.pose,h=null!==c?c:t;h.matrix.copy(f),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==r.orientation&&(y.fromArray(r.orientation),h.quaternion.multiply(y)),null!==r.position&&(y.setFromRotationMatrix(f),M.fromArray(r.position),M.applyQuaternion(y),h.position.add(M)),h.updateMatrixWorld(),w.near=t.near,T.near=t.near,w.far=t.far,T.far=t.far,w.matrixWorldInverse.fromArray(l.leftViewMatrix),T.matrixWorldInverse.fromArray(l.rightViewMatrix),m.getInverse(f),"local-floor"===_&&(w.matrixWorldInverse.multiply(m),T.matrixWorldInverse.multiply(m));var v=h.parent;null!==v&&(x.getInverse(v.matrixWorld),w.matrixWorldInverse.multiply(x),T.matrixWorldInverse.multiply(x)),w.matrixWorld.getInverse(w.matrixWorldInverse),T.matrixWorld.getInverse(T.matrixWorldInverse),w.projectionMatrix.fromArray(l.leftProjectionMatrix),T.projectionMatrix.fromArray(l.rightProjectionMatrix),He(S,w,T);var E=o.getLayers();if(E.length){var L=E[0];F(w.viewport,L.leftBounds),F(T.viewport,L.rightBounds)}return function(){for(var i=0;i<d.length;i++){var t=d[i],e=N(i);if(void 0!==e&&void 0!==e.pose){if(null===e.pose)return;var n=e.pose;!1===n.hasPosition&&t.position.set(.2,-.6,-.05),null!==n.position&&t.position.fromArray(n.position),null!==n.orientation&&t.quaternion.fromArray(n.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(f),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var r="Daydream Controller"===e.id?0:1;void 0===D[i]&&(D[i]=!1),D[i]!==e.buttons[r].pressed&&(D[i]=e.buttons[r].pressed,!0===D[i]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),S},this.getStandingMatrix=function(){return f},this.isPresenting=A;var z=new I;this.setAnimationLoop=function(t){z.setAnimationLoop(t),A()&&z.start()},this.submitFrame=function(){A()&&o.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",C)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function We(t){var e=t.context,n=null,r=null,o="local-floor",l=null,c=[],h=[];function d(){return null!==n&&null!==r}var f=new Oe.a;f.layers.enable(1),f.viewport=new U.a;var m=new Oe.a;m.layers.enable(2),m.viewport=new U.a;var v=new Be([f,m]);function _(t){for(var i=0;i<c.length;i++)h[i]===t.inputSource&&c[i].dispatchEvent({type:t.type})}function x(){t.setFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),w.stop()}function y(t){r=t,w.setContext(n),w.start()}function M(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}v.layers.enable(1),v.layers.enable(2),this.enabled=!1,this.getController=function(t){var e=c[t];return void 0===e&&((e=new Fe).matrixAutoUpdate=!1,e.visible=!1,c[t]=e),e},this.setFramebufferScaleFactor=function(t){t},this.setReferenceSpaceType=function(t){o=t},this.getSession=function(){return n},this.setSession=function(t){null!==(n=t)&&(n.addEventListener("select",_),n.addEventListener("selectstart",_),n.addEventListener("selectend",_),n.addEventListener("end",x),n.updateRenderState({baseLayer:new XRWebGLLayer(n,e)}),n.requestReferenceSpace(o).then(y),h=n.inputSources,n.addEventListener("inputsourceschange",function(){h=n.inputSources,console.log(h);for(var i=0;i<c.length;i++){c[i].userData.inputSource=h[i]}}))},this.getCamera=function(t){if(d()){var e=t.parent,n=v.cameras;M(v,e);for(var i=0;i<n.length;i++)M(n[i],e);t.matrixWorld.copy(v.matrixWorld);for(var r=t.children,o=(i=0,r.length);i<o;i++)r[i].updateMatrixWorld(!0);return He(v,f,m),v}return t},this.isPresenting=d;var E=null;var w=new I;w.setAnimationLoop(function(time,e){if(null!==(l=e.getViewerPose(r))){var o=l.views,d=n.renderState.baseLayer;t.setFramebuffer(d.framebuffer);for(var i=0;i<o.length;i++){var view=o[i],f=d.getViewport(view),m=view.transform.inverse.matrix,_=v.cameras[i];_.matrix.fromArray(m).getInverse(_.matrix),_.projectionMatrix.fromArray(view.projectionMatrix),_.viewport.set(f.x,f.y,f.width,f.height),0===i&&v.matrix.copy(_.matrix)}}for(i=0;i<c.length;i++){var x=c[i],y=h[i];if(y){var M=e.getPose(y.targetRaySpace,r);if(null!==M){x.matrix.fromArray(M.transform.matrix),x.matrix.decompose(x.position,x.rotation,x.scale),x.visible=!0;continue}}x.visible=!1}E&&E(time)}),this.setAnimationLoop=function(t){E=t},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new L.a},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function Xe(t){console.log("THREE.WebGLRenderer",o.pb);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,c=void 0===t.depth||t.depth,d=void 0===t.stencil||t.stencil,f=void 0!==t.antialias&&t.antialias,m=void 0===t.premultipliedAlpha||t.premultipliedAlpha,v=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,x=void 0!==t.powerPreference?t.powerPreference:"default",y=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat,M=null,w=null;this.domElement=e,this.context=null,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=o.P,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var T,A,P,C,z,O,B,G,V,H,k,W,X,j,Y,tt,at,lt,ct=this,ut=!1,ht=null,ft=0,pt=0,mt=null,gt=null,vt=-1,_t={geometry:null,program:null,wireframe:!1},xt=null,yt=null,bt=new U.a,Mt=new U.a,Et=null,wt=e.width,Tt=e.height,St=1,Lt=new U.a(0,0,wt,Tt),At=new U.a(0,0,wt,Tt),Rt=!1,Pt=new S,Ct=new K,Dt=!1,Nt=!1,Ut=new L.a,It=new E.a;function Ft(){return null===mt?St:1}try{var zt={alpha:r,depth:c,stencil:d,antialias:f,premultipliedAlpha:m,preserveDrawingBuffer:v,powerPreference:x,failIfMajorPerformanceCaveat:y,xrCompatible:!0};if(e.addEventListener("webglcontextlost",Vt,!1),e.addEventListener("webglcontextrestored",Ht,!1),null===(T=n||e.getContext("webgl",zt)||e.getContext("experimental-webgl",zt)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===T.getShaderPrecisionFormat&&(T.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Ot(){A=new $(T),(P=new Q(T,A,t)).isWebGL2||(A.get("WEBGL_depth_texture"),A.get("OES_texture_float"),A.get("OES_texture_half_float"),A.get("OES_texture_half_float_linear"),A.get("OES_standard_derivatives"),A.get("OES_element_index_uint"),A.get("ANGLE_instanced_arrays")),A.get("OES_texture_float_linear"),lt=new Ue(T,A,P),(C=new De(T,A,lt,P)).scissor(Mt.copy(At).multiplyScalar(St)),C.viewport(bt.copy(Lt).multiplyScalar(St)),z=new it(T),O=new _e,B=new Ne(T,A,C,O,P,lt,z),G=new F(T),V=new et(T,G,z),H=new st(V,z),Y=new ot(T),k=new ve(ct,A,P,B),W=new Me,X=new Le,j=new Z(ct,C,H,m),tt=new J(T,A,z,P),at=new nt(T,A,z,P),z.programs=k.programs,ct.context=T,ct.capabilities=P,ct.extensions=A,ct.properties=O,ct.renderLists=W,ct.state=C,ct.info=z}Ot();var Bt="undefined"!=typeof navigator&&"xr"in navigator&&"supportsSession"in navigator.xr?new We(ct):new ke(ct);this.vr=Bt;var Gt=new Ce(ct,H,P.maxTextureSize);function Vt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),ut=!0}function Ht(){console.log("THREE.WebGLRenderer: Context Restored."),ut=!1,Ot()}function kt(t){var e=t.target;e.removeEventListener("dispose",kt),function(t){Wt(t),O.remove(t)}(e)}function Wt(t){var e=O.get(t).program;t.program=void 0,void 0!==e&&k.releaseProgram(e)}this.shadowMap=Gt,this.getContext=function(){return T},this.getContextAttributes=function(){return T.getContextAttributes()},this.forceContextLoss=function(){var t=A.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=A.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return St},this.setPixelRatio=function(t){void 0!==t&&(St=t,this.setSize(wt,Tt,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new h.a),t.set(wt,Tt)},this.setSize=function(t,n,r){Bt.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(wt=t,Tt=n,e.width=t*St,e.height=n*St,!1!==r&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new h.a),t.set(wt*St,Tt*St)},this.setDrawingBufferSize=function(t,n,r){wt=t,Tt=n,St=r,e.width=t*r,e.height=n*r,this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new U.a),t.copy(bt)},this.getViewport=function(t){return t.copy(Lt)},this.setViewport=function(t,e,n,r){t.isVector4?Lt.set(t.x,t.y,t.z,t.w):Lt.set(t,e,n,r),C.viewport(bt.copy(Lt).multiplyScalar(St))},this.getScissor=function(t){return t.copy(At)},this.setScissor=function(t,e,n,r){t.isVector4?At.set(t.x,t.y,t.z,t.w):At.set(t,e,n,r),C.scissor(Mt.copy(At).multiplyScalar(St))},this.getScissorTest=function(){return Rt},this.setScissorTest=function(t){C.setScissorTest(Rt=t)},this.getClearColor=function(){return j.getClearColor()},this.setClearColor=function(){j.setClearColor.apply(j,arguments)},this.getClearAlpha=function(){return j.getClearAlpha()},this.setClearAlpha=function(){j.setClearAlpha.apply(j,arguments)},this.clear=function(t,e,n){var r=0;(void 0===t||t)&&(r|=T.COLOR_BUFFER_BIT),(void 0===e||e)&&(r|=T.DEPTH_BUFFER_BIT),(void 0===n||n)&&(r|=T.STENCIL_BUFFER_BIT),T.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Vt,!1),e.removeEventListener("webglcontextrestored",Ht,!1),W.dispose(),X.dispose(),O.dispose(),H.dispose(),Bt.dispose(),jt.stop()},this.renderBufferImmediate=function(object,t){C.initAttributes();var e=O.get(object);object.hasPositions&&!e.position&&(e.position=T.createBuffer()),object.hasNormals&&!e.normal&&(e.normal=T.createBuffer()),object.hasUvs&&!e.uv&&(e.uv=T.createBuffer()),object.hasColors&&!e.color&&(e.color=T.createBuffer());var n=t.getAttributes();object.hasPositions&&(T.bindBuffer(T.ARRAY_BUFFER,e.position),T.bufferData(T.ARRAY_BUFFER,object.positionArray,T.DYNAMIC_DRAW),C.enableAttribute(n.position),T.vertexAttribPointer(n.position,3,T.FLOAT,!1,0,0)),object.hasNormals&&(T.bindBuffer(T.ARRAY_BUFFER,e.normal),T.bufferData(T.ARRAY_BUFFER,object.normalArray,T.DYNAMIC_DRAW),C.enableAttribute(n.normal),T.vertexAttribPointer(n.normal,3,T.FLOAT,!1,0,0)),object.hasUvs&&(T.bindBuffer(T.ARRAY_BUFFER,e.uv),T.bufferData(T.ARRAY_BUFFER,object.uvArray,T.DYNAMIC_DRAW),C.enableAttribute(n.uv),T.vertexAttribPointer(n.uv,2,T.FLOAT,!1,0,0)),object.hasColors&&(T.bindBuffer(T.ARRAY_BUFFER,e.color),T.bufferData(T.ARRAY_BUFFER,object.colorArray,T.DYNAMIC_DRAW),C.enableAttribute(n.color),T.vertexAttribPointer(n.color,3,T.FLOAT,!1,0,0)),C.disableUnusedAttributes(),T.drawArrays(T.TRIANGLES,0,object.count),object.count=0},this.renderBufferDirect=function(t,e,n,r,object,l){var c=object.isMesh&&object.matrixWorld.determinant()<0;C.setMaterial(r,c);var h=Qt(t,e,r,object),d=!1;_t.geometry===n.id&&_t.program===h.id&&_t.wireframe===(!0===r.wireframe)||(_t.geometry=n.id,_t.program=h.id,_t.wireframe=!0===r.wireframe,d=!0),object.morphTargetInfluences&&(Y.update(object,n,r,h),d=!0);var f,m=n.index,v=n.attributes.position,_=1;!0===r.wireframe&&(m=V.getWireframeAttribute(n),_=2);var x=tt;null!==m&&(f=G.get(m),(x=at).setIndex(f)),d&&(!function(t,e,n){if(n&&n.isInstancedBufferGeometry&&!P.isWebGL2&&null===A.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");C.initAttributes();var r=n.attributes,o=e.getAttributes(),l=t.defaultAttributeValues;for(var c in o){var h=o[c];if(h>=0){var d=r[c];if(void 0!==d){var f=d.normalized,m=d.itemSize,v=G.get(d);if(void 0===v)continue;var _=v.buffer,x=v.type,y=v.bytesPerElement;if(d.isInterleavedBufferAttribute){var data=d.data,M=data.stride,E=d.offset;data&&data.isInstancedInterleavedBuffer?(C.enableAttributeAndDivisor(h,data.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=data.meshPerAttribute*data.count)):C.enableAttribute(h),T.bindBuffer(T.ARRAY_BUFFER,_),T.vertexAttribPointer(h,m,x,f,M*y,E*y)}else d.isInstancedBufferAttribute?(C.enableAttributeAndDivisor(h,d.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=d.meshPerAttribute*d.count)):C.enableAttribute(h),T.bindBuffer(T.ARRAY_BUFFER,_),T.vertexAttribPointer(h,m,x,f,0,0)}else if(void 0!==l){var w=l[c];if(void 0!==w)switch(w.length){case 2:T.vertexAttrib2fv(h,w);break;case 3:T.vertexAttrib3fv(h,w);break;case 4:T.vertexAttrib4fv(h,w);break;default:T.vertexAttrib1fv(h,w)}}}}C.disableUnusedAttributes()}(r,h,n),null!==m&&T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,f.buffer));var y=1/0;null!==m?y=m.count:void 0!==v&&(y=v.count);var M=n.drawRange.start*_,E=n.drawRange.count*_,w=null!==l?l.start*_:0,S=null!==l?l.count*_:1/0,L=Math.max(M,w),R=Math.min(y,M+E,w+S)-1,D=Math.max(0,R-L+1);if(0!==D){if(object.isMesh)if(!0===r.wireframe)C.setLineWidth(r.wireframeLinewidth*Ft()),x.setMode(T.LINES);else switch(object.drawMode){case o.ic:x.setMode(T.TRIANGLES);break;case o.hc:x.setMode(T.TRIANGLE_STRIP);break;case o.gc:x.setMode(T.TRIANGLE_FAN)}else if(object.isLine){var N=r.linewidth;void 0===N&&(N=1),C.setLineWidth(N*Ft()),object.isLineSegments?x.setMode(T.LINES):object.isLineLoop?x.setMode(T.LINE_LOOP):x.setMode(T.LINE_STRIP)}else object.isPoints?x.setMode(T.POINTS):object.isSprite&&x.setMode(T.TRIANGLES);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&x.renderInstances(n,L,D):x.render(L,D)}},this.compile=function(t,e){(w=X.get(t,e)).init(),t.traverse(function(object){object.isLight&&(w.pushLight(object),object.castShadow&&w.pushShadow(object))}),w.setupLights(e),t.traverse(function(object){if(object.material)if(Array.isArray(object.material))for(var i=0;i<object.material.length;i++)Jt(object.material[i],t.fog,object);else Jt(object.material,t.fog,object)})};var Xt=null;var jt=new I;function Yt(object,t,e,n){if(!1!==object.visible){if(object.layers.test(t.layers))if(object.isGroup)e=object.renderOrder;else if(object.isLight)w.pushLight(object),object.castShadow&&w.pushShadow(object);else if(object.isSprite){if(!object.frustumCulled||Pt.intersectsSprite(object)){n&&It.setFromMatrixPosition(object.matrixWorld).applyMatrix4(Ut);var r=H.update(object);(o=object.material).visible&&M.push(object,r,o,e,It.z,null)}}else if(object.isImmediateRenderObject)n&&It.setFromMatrixPosition(object.matrixWorld).applyMatrix4(Ut),M.push(object,null,object.material,e,It.z,null);else if((object.isMesh||object.isLine||object.isPoints)&&(object.isSkinnedMesh&&object.skeleton.update(),!object.frustumCulled||Pt.intersectsObject(object))){n&&It.setFromMatrixPosition(object.matrixWorld).applyMatrix4(Ut);r=H.update(object);var o=object.material;if(Array.isArray(o))for(var l=r.groups,i=0,c=l.length;i<c;i++){var h=l[i],d=o[h.materialIndex];d&&d.visible&&M.push(object,r,d,e,It.z,h)}else o.visible&&M.push(object,r,o,e,It.z,null)}var f=object.children;for(i=0,c=f.length;i<c;i++)Yt(f[i],t,e,n)}}function qt(t,e,n,r){for(var i=0,o=t.length;i<o;i++){var l=t[i],object=l.object,c=l.geometry,h=void 0===r?l.material:r,d=l.group;if(n.isArrayCamera){yt=n;for(var f=n.cameras,m=0,v=f.length;m<v;m++){var _=f[m];object.layers.test(_.layers)&&(C.viewport(bt.copy(_.viewport)),w.setupLights(_),Zt(object,e,_,c,h,d))}}else yt=null,Zt(object,e,n,c,h,d)}}function Zt(object,t,e,n,r,o){if(object.onBeforeRender(ct,t,e,n,r,o),w=X.get(t,yt||e),object.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,object.matrixWorld),object.normalMatrix.getNormalMatrix(object.modelViewMatrix),object.isImmediateRenderObject){C.setMaterial(r);var l=Qt(e,t.fog,r,object);_t.geometry=null,_t.program=null,_t.wireframe=!1,function(object,t){object.render(function(object){ct.renderBufferImmediate(object,t)})}(object,l)}else ct.renderBufferDirect(e,t.fog,n,r,object,o);object.onAfterRender(ct,t,e,n,r,o),w=X.get(t,yt||e)}function Jt(t,e,object){var n=O.get(t),r=w.state.lights,o=w.state.shadowsArray,l=n.lightsHash,c=r.state.hash,h=k.getParameters(t,r.state,o,e,Ct.numPlanes,Ct.numIntersection,object),code=k.getProgramCode(t,h),d=n.program,f=!0;if(void 0===d)t.addEventListener("dispose",kt);else if(d.code!==code)Wt(t);else if(l.stateID!==c.stateID||l.directionalLength!==c.directionalLength||l.pointLength!==c.pointLength||l.spotLength!==c.spotLength||l.rectAreaLength!==c.rectAreaLength||l.hemiLength!==c.hemiLength||l.shadowsLength!==c.shadowsLength)l.stateID=c.stateID,l.directionalLength=c.directionalLength,l.pointLength=c.pointLength,l.spotLength=c.spotLength,l.rectAreaLength=c.rectAreaLength,l.hemiLength=c.hemiLength,l.shadowsLength=c.shadowsLength,f=!1;else{if(void 0!==h.shaderID)return;f=!1}if(f){if(h.shaderID){var m=N[h.shaderID];n.shader={name:t.type,uniforms:R(m.uniforms),vertexShader:m.vertexShader,fragmentShader:m.fragmentShader}}else n.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(n.shader,ct),code=k.getProgramCode(t,h),d=k.acquireProgram(t,n.shader,h,code),n.program=d,t.program=d}var v=d.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var i=0;i<ct.maxMorphTargets;i++)v["morphTarget"+i]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(i=0;i<ct.maxMorphNormals;i++)v["morphNormal"+i]>=0&&t.numSupportedMorphNormals++}var _=n.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(n.numClippingPlanes=Ct.numPlanes,n.numIntersection=Ct.numIntersection,_.clippingPlanes=Ct.uniform),n.fog=e,void 0===l&&(n.lightsHash=l={}),l.stateID=c.stateID,l.directionalLength=c.directionalLength,l.pointLength=c.pointLength,l.spotLength=c.spotLength,l.rectAreaLength=c.rectAreaLength,l.hemiLength=c.hemiLength,l.shadowsLength=c.shadowsLength,t.lights&&(_.ambientLightColor.value=r.state.ambient,_.lightProbe.value=r.state.probe,_.directionalLights.value=r.state.directional,_.spotLights.value=r.state.spot,_.rectAreaLights.value=r.state.rectArea,_.pointLights.value=r.state.point,_.hemisphereLights.value=r.state.hemi,_.directionalShadowMap.value=r.state.directionalShadowMap,_.directionalShadowMatrix.value=r.state.directionalShadowMatrix,_.spotShadowMap.value=r.state.spotShadowMap,_.spotShadowMatrix.value=r.state.spotShadowMatrix,_.pointShadowMap.value=r.state.pointShadowMap,_.pointShadowMatrix.value=r.state.pointShadowMatrix);var x=n.program.getUniforms(),y=ae.seqWithValue(x.seq,_);n.uniformsList=y}function Qt(t,e,n,object){B.resetTextureUnits();var r=O.get(n),c=w.state.lights,h=r.lightsHash,d=c.state.hash;if(Dt&&(Nt||t!==xt)){var f=t===xt&&n.id===vt;Ct.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,r,f)}!1===n.needsUpdate&&(void 0===r.program?n.needsUpdate=!0:n.fog&&r.fog!==e?n.needsUpdate=!0:(!n.lights||h.stateID===d.stateID&&h.directionalLength===d.directionalLength&&h.pointLength===d.pointLength&&h.spotLength===d.spotLength&&h.rectAreaLength===d.rectAreaLength&&h.hemiLength===d.hemiLength&&h.shadowsLength===d.shadowsLength)&&(void 0===r.numClippingPlanes||r.numClippingPlanes===Ct.numPlanes&&r.numIntersection===Ct.numIntersection)||(n.needsUpdate=!0)),n.needsUpdate&&(Jt(n,e,object),n.needsUpdate=!1);var m,v,x=!1,y=!1,M=!1,E=r.program,S=E.getUniforms(),L=r.shader.uniforms;if(C.useProgram(E.program)&&(x=!0,y=!0,M=!0),n.id!==vt&&(vt=n.id,y=!0),x||xt!==t){if(S.setValue(T,"projectionMatrix",t.projectionMatrix),P.logarithmicDepthBuffer&&S.setValue(T,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),xt!==t&&(xt=t,y=!0,M=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var A=S.map.cameraPosition;void 0!==A&&A.setValue(T,It.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&S.setValue(T,"viewMatrix",t.matrixWorldInverse)}if(n.skinning){S.setOptional(T,object,"bindMatrix"),S.setOptional(T,object,"bindMatrixInverse");var R=object.skeleton;if(R){var N=R.bones;if(P.floatVertexTextures){if(void 0===R.boneTexture){var U=Math.sqrt(4*N.length);U=l.a.ceilPowerOfTwo(U),U=Math.max(U,4);var I=new Float32Array(U*U*4);I.set(R.boneMatrices);var F=new _(I,U,U,o.rb,o.C);F.needsUpdate=!0,R.boneMatrices=I,R.boneTexture=F,R.boneTextureSize=U}S.setValue(T,"boneTexture",R.boneTexture,B),S.setValue(T,"boneTextureSize",R.boneTextureSize)}else S.setOptional(T,R,"boneMatrices")}}return y&&(S.setValue(T,"toneMappingExposure",ct.toneMappingExposure),S.setValue(T,"toneMappingWhitePoint",ct.toneMappingWhitePoint),n.lights&&(v=M,(m=L).ambientLightColor.needsUpdate=v,m.lightProbe.needsUpdate=v,m.directionalLights.needsUpdate=v,m.pointLights.needsUpdate=v,m.spotLights.needsUpdate=v,m.rectAreaLights.needsUpdate=v,m.hemisphereLights.needsUpdate=v),e&&n.fog&&function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(L,e),n.isMeshBasicMaterial?Kt(L,n):n.isMeshLambertMaterial?(Kt(L,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(L,n)):n.isMeshPhongMaterial?(Kt(L,n),n.isMeshToonMaterial?function(t,e){$t(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(L,n):$t(L,n)):n.isMeshStandardMaterial?(Kt(L,n),n.isMeshPhysicalMaterial?function(t,e){te(t,e),t.reflectivity.value=e.reflectivity,t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness}(L,n):te(L,n)):n.isMeshMatcapMaterial?(Kt(L,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===o.g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===o.g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(L,n)):n.isMeshDepthMaterial?(Kt(L,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(L,n)):n.isMeshDistanceMaterial?(Kt(L,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(L,n)):n.isMeshNormalMaterial?(Kt(L,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===o.g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===o.g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(L,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(L,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(L,n)):n.isPointsMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*St,t.scale.value=.5*Tt,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(L,n):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(L,n):n.isShadowMaterial&&(L.color.value.copy(n.color),L.opacity.value=n.opacity),void 0!==L.ltc_1&&(L.ltc_1.value=D.LTC_1),void 0!==L.ltc_2&&(L.ltc_2.value=D.LTC_2),ae.upload(T,r.uniformsList,L,B)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(ae.upload(T,r.uniformsList,L,B),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&S.setValue(T,"center",object.center),S.setValue(T,"modelViewMatrix",object.modelViewMatrix),S.setValue(T,"normalMatrix",object.normalMatrix),S.setValue(T,"modelMatrix",object.matrixWorld),E}function Kt(t,e){var n;t.opacity.value=e.opacity,e.color&&t.diffuse.value.copy(e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=O.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}function $t(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===o.g&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===o.g&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function te(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===o.g&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===o.g&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}jt.setAnimationLoop(function(time){Bt.isPresenting()||Xt&&Xt(time)}),"undefined"!=typeof window&&jt.setContext(window),this.setAnimationLoop=function(t){Xt=t,Bt.setAnimationLoop(t),jt.start()},this.render=function(t,e){var n,r;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),r=arguments[3]),e&&e.isCamera){if(!ut){_t.geometry=null,_t.program=null,_t.wireframe=!1,vt=-1,xt=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),Bt.enabled&&(e=Bt.getCamera(e)),(w=X.get(t,e)).init(),t.onBeforeRender(ct,t,e,n||mt),Ut.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),Pt.setFromMatrix(Ut),Nt=this.localClippingEnabled,Dt=Ct.init(this.clippingPlanes,Nt,e),(M=W.get(t,e)).init(),Yt(t,e,0,ct.sortObjects),!0===ct.sortObjects&&M.sort(),Dt&&Ct.beginShadows();var o=w.state.shadowsArray;Gt.render(o,t,e),w.setupLights(e),Dt&&Ct.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),j.render(M,t,e,r);var l=M.opaque,c=M.transparent;if(t.overrideMaterial){var h=t.overrideMaterial;l.length&&qt(l,t,e,h),c.length&&qt(c,t,e,h)}else l.length&&qt(l,t,e),c.length&&qt(c,t,e);t.onAfterRender(ct,t,e),null!==mt&&(B.updateRenderTargetMipmap(mt),B.updateMultisampleRenderTarget(mt)),C.buffers.depth.setTest(!0),C.buffers.depth.setMask(!0),C.buffers.color.setMask(!0),C.setPolygonOffset(!1),Bt.enabled&&Bt.submitFrame(),M=null,w=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(t){ht!==t&&T.bindFramebuffer(T.FRAMEBUFFER,t),ht=t},this.getActiveCubeFace=function(){return ft},this.getActiveMipMapLevel=function(){return pt},this.getRenderTarget=function(){return mt},this.setRenderTarget=function(t,e,n){mt=t,ft=e,pt=n,t&&void 0===O.get(t).__webglFramebuffer&&B.setupRenderTarget(t);var r=ht,o=!1;if(t){var l=O.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(r=l[e||0],o=!0):r=t.isWebGLMultisampleRenderTarget?O.get(t).__webglMultisampledFramebuffer:l,bt.copy(t.viewport),Mt.copy(t.scissor),Et=t.scissorTest}else bt.copy(Lt).multiplyScalar(St),Mt.copy(At).multiplyScalar(St),Et=Rt;if(gt!==r&&(T.bindFramebuffer(T.FRAMEBUFFER,r),gt=r),C.viewport(bt),C.scissor(Mt),C.setScissorTest(Et),o){var c=O.get(t.texture);T.framebufferTexture2D(T.FRAMEBUFFER,T.COLOR_ATTACHMENT0,T.TEXTURE_CUBE_MAP_POSITIVE_X+(e||0),c.__webglTexture,n||0)}},this.readRenderTargetPixels=function(t,e,n,r,l,c,h){if(t&&t.isWebGLRenderTarget){var d=O.get(t).__webglFramebuffer;if(t.isWebGLRenderTargetCube&&void 0!==h&&(d=d[h]),d){var f=!1;d!==gt&&(T.bindFramebuffer(T.FRAMEBUFFER,d),f=!0);try{var m=t.texture,v=m.format,_=m.type;if(v!==o.rb&&lt.convert(v)!==T.getParameter(T.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(_===o.lc||lt.convert(_)===T.getParameter(T.IMPLEMENTATION_COLOR_READ_TYPE)||_===o.C&&(P.isWebGL2||A.get("OES_texture_float")||A.get("WEBGL_color_buffer_float"))||_===o.H&&(P.isWebGL2?A.get("EXT_color_buffer_float"):A.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");T.checkFramebufferStatus(T.FRAMEBUFFER)===T.FRAMEBUFFER_COMPLETE?e>=0&&e<=t.width-r&&n>=0&&n<=t.height-l&&T.readPixels(e,n,r,l,lt.convert(v),lt.convert(_),c):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{f&&T.bindFramebuffer(T.FRAMEBUFFER,gt)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){var r=e.image.width,o=e.image.height,l=lt.convert(e.format);B.setTexture2D(e,0),T.copyTexImage2D(T.TEXTURE_2D,n||0,l,t.x,t.y,r,o,0)},this.copyTextureToTexture=function(t,e,n,r){var o=e.image.width,l=e.image.height,c=lt.convert(n.format),h=lt.convert(n.type);B.setTexture2D(n,0),e.isDataTexture?T.texSubImage2D(T.TEXTURE_2D,r||0,t.x,t.y,o,l,c,h,e.image.data):T.texSubImage2D(T.TEXTURE_2D,r||0,t.x,t.y,c,h,e.image)}}n.d(e,"a",function(){return Xe})},175:function(t,e,n){"use strict";n.d(e,"a",function(){return o});var r=n(162);function o(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==r?r:1}Object.assign(o,{slerp:function(t,e,n,r){return n.copy(t).slerp(e,r)},slerpFlat:function(t,e,n,r,o,l,c){var h=n[r+0],d=n[r+1],f=n[r+2],m=n[r+3],v=o[l+0],_=o[l+1],x=o[l+2],y=o[l+3];if(m!==y||h!==v||d!==_||f!==x){var s=1-c,M=h*v+d*_+f*x+m*y,E=M>=0?1:-1,w=1-M*M;if(w>Number.EPSILON){var T=Math.sqrt(w),S=Math.atan2(T,M*E);s=Math.sin(s*S)/T,c=Math.sin(c*S)/T}var L=c*E;if(h=h*s+v*L,d=d*s+_*L,f=f*s+x*L,m=m*s+y*L,s===1-c){var A=1/Math.sqrt(h*h+d*d+f*f+m*m);h*=A,d*=A,f*=A,m*=A}}t[e]=h,t[e+1]=d,t[e+2]=f,t[e+3]=m}}),Object.defineProperties(o.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(o.prototype,{isQuaternion:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,r=t._y,o=t._z,l=t.order,c=Math.cos,h=Math.sin,d=c(n/2),f=c(r/2),m=c(o/2),v=h(n/2),_=h(r/2),x=h(o/2);return"XYZ"===l?(this._x=v*f*m+d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m-v*_*x):"YXZ"===l?(this._x=v*f*m+d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m+v*_*x):"ZXY"===l?(this._x=v*f*m-d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m-v*_*x):"ZYX"===l?(this._x=v*f*m-d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m+v*_*x):"YZX"===l?(this._x=v*f*m+d*_*x,this._y=d*_*m+v*f*x,this._z=d*f*x-v*_*m,this._w=d*f*m-v*_*x):"XZY"===l&&(this._x=v*f*m-d*_*x,this._y=d*_*m-v*f*x,this._z=d*f*x+v*_*m,this._w=d*f*m+v*_*x),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,s=Math.sin(n);return this._x=t.x*s,this._y=t.y*s,this._z=t.z*s,this._w=Math.cos(n),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var s,e=t.elements,n=e[0],r=e[4],o=e[8],l=e[1],c=e[5],h=e[9],d=e[2],f=e[6],m=e[10],v=n+c+m;return v>0?(s=.5/Math.sqrt(v+1),this._w=.25/s,this._x=(f-h)*s,this._y=(o-d)*s,this._z=(l-r)*s):n>c&&n>m?(s=2*Math.sqrt(1+n-c-m),this._w=(f-h)/s,this._x=.25*s,this._y=(r+l)/s,this._z=(o+d)/s):c>m?(s=2*Math.sqrt(1+c-n-m),this._w=(o-d)/s,this._x=(r+l)/s,this._y=.25*s,this._z=(h+f)/s):(s=2*Math.sqrt(1+m-n-c),this._w=(l-r)/s,this._x=(o+d)/s,this._y=(h+f)/s,this._z=.25*s),this.onChangeCallback(),this},setFromUnitVectors:function(t,e){var n=t.dot(e)+1;return n<1e-6?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()},angleTo:function(q){return 2*Math.acos(Math.abs(r.a.clamp(this.dot(q),-1,1)))},rotateTowards:function(q,t){var e=this.angleTo(q);if(0===e)return this;var n=Math.min(1,t/e);return this.slerp(q,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(q,p){return void 0!==p?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(q,p)):this.multiplyQuaternions(this,q)},premultiply:function(q){return this.multiplyQuaternions(q,this)},multiplyQuaternions:function(a,b){var t=a._x,e=a._y,n=a._z,r=a._w,o=b._x,l=b._y,c=b._z,h=b._w;return this._x=t*h+r*o+e*c-n*l,this._y=e*h+r*l+n*o-t*c,this._z=n*h+r*c+t*l-e*o,this._w=r*h-t*o-e*l-n*c,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,r=this._y,o=this._z,l=this._w,c=l*t._w+n*t._x+r*t._y+o*t._z;if(c<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,c=-c):this.copy(t),c>=1)return this._w=l,this._x=n,this._y=r,this._z=o,this;var h=1-c*c;if(h<=Number.EPSILON){var s=1-e;return this._w=s*l+e*this._w,this._x=s*n+e*this._x,this._y=s*r+e*this._y,this._z=s*o+e*this._z,this.normalize()}var d=Math.sqrt(h),f=Math.atan2(d,c),m=Math.sin((1-e)*f)/d,v=Math.sin(e*f)/d;return this._w=l*m+this._w*v,this._x=n*m+this._x*v,this._y=r*m+this._y*v,this._z=o*m+this._z*v,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}})},176:function(t,e,n){"use strict";n.d(e,"a",function(){return c});var r,o=n(181),l=n(157);function c(t,e){this.center=void 0!==t?t:new l.a,this.radius=void 0!==e?e:0}Object.assign(c.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:(r=new o.a,function(t,e){var n=this.center;void 0!==e?n.copy(e):r.setFromPoints(t).getCenter(n);for(var o=0,i=0,l=t.length;i<l;i++)o=Math.max(o,n.distanceToSquared(t[i]));return this.radius=Math.sqrt(o),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new l.a),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new o.a),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}})},177:function(t,e,n){"use strict";n.d(e,"b",function(){return h}),n.d(e,"a",function(){return d});var r=n(198),o=n(180),l=n(178),c=n(157);function h(t,e,n,o,l,c){r.a.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:o,heightSegments:l,depthSegments:c},this.fromBufferGeometry(new d(t,e,n,o,l,c)),this.mergeVertices()}function d(t,e,n,r,h,d){o.a.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:h,depthSegments:d};var f=this;t=t||1,e=e||1,n=n||1,r=Math.floor(r)||1,h=Math.floor(h)||1,d=Math.floor(d)||1;var m=[],v=[],_=[],x=[],y=0,M=0;function E(u,t,e,n,r,o,l,h,d,E,w){var T,S,L=o/d,A=l/E,R=o/2,P=l/2,C=h/2,D=d+1,N=E+1,U=0,I=0,F=new c.a;for(S=0;S<N;S++){var z=S*A-P;for(T=0;T<D;T++){var O=T*L-R;F[u]=O*n,F[t]=z*r,F[e]=C,v.push(F.x,F.y,F.z),F[u]=0,F[t]=0,F[e]=h>0?1:-1,_.push(F.x,F.y,F.z),x.push(T/d),x.push(1-S/E),U+=1}}for(S=0;S<E;S++)for(T=0;T<d;T++){var a=y+T+D*S,b=y+T+D*(S+1),B=y+(T+1)+D*(S+1),G=y+(T+1)+D*S;m.push(a,b,G),m.push(b,B,G),I+=6}f.addGroup(M,I,w),M+=I,y+=U}E("z","y","x",-1,-1,n,e,t,d,h,0),E("z","y","x",1,-1,n,e,-t,d,h,1),E("x","z","y",1,1,t,n,e,r,d,2),E("x","z","y",1,-1,t,n,-e,r,d,3),E("x","y","z",1,-1,t,e,n,r,h,4),E("x","y","z",-1,-1,t,e,-n,r,h,5),this.setIndex(m),this.addAttribute("position",new l.b(v,3)),this.addAttribute("normal",new l.b(_,3)),this.addAttribute("uv",new l.b(x,2))}h.prototype=Object.create(r.a.prototype),h.prototype.constructor=h,d.prototype=Object.create(o.a.prototype),d.prototype.constructor=d},178:function(t,e,n){"use strict";n.d(e,"b",function(){return M}),n.d(e,"d",function(){return y}),n.d(e,"c",function(){return _}),n.d(e,"a",function(){return h});var r=n(167),o=n(157),l=n(161),c=n(166);function h(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function d(t,e,n){h.call(this,new Int8Array(t),e,n)}function f(t,e,n){h.call(this,new Uint8Array(t),e,n)}function m(t,e,n){h.call(this,new Uint8ClampedArray(t),e,n)}function v(t,e,n){h.call(this,new Int16Array(t),e,n)}function _(t,e,n){h.call(this,new Uint16Array(t),e,n)}function x(t,e,n){h.call(this,new Int32Array(t),e,n)}function y(t,e,n){h.call(this,new Uint32Array(t),e,n)}function M(t,e,n){h.call(this,new Float32Array(t),e,n)}function E(t,e,n){h.call(this,new Float64Array(t),e,n)}Object.defineProperty(h.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(h.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(source){return this.name=source.name,this.array=new source.array.constructor(source.array),this.itemSize=source.itemSize,this.count=source.count,this.normalized=source.normalized,this.dynamic=source.dynamic,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var o=t[i];void 0===o&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),o=new c.a),e[n++]=o.r,e[n++]=o.g,e[n++]=o.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var o=t[i];void 0===o&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),o=new l.a),e[n++]=o.x,e[n++]=o.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var l=t[i];void 0===l&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),l=new o.a),e[n++]=l.x,e[n++]=l.y,e[n++]=l.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,i=0,o=t.length;i<o;i++){var l=t[i];void 0===l&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),l=new r.a),e[n++]=l.x,e[n++]=l.y,e[n++]=l.z,e[n++]=l.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this},setXYZW:function(t,e,n,r,o){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=o,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),d.prototype=Object.create(h.prototype),d.prototype.constructor=d,f.prototype=Object.create(h.prototype),f.prototype.constructor=f,m.prototype=Object.create(h.prototype),m.prototype.constructor=m,v.prototype=Object.create(h.prototype),v.prototype.constructor=v,_.prototype=Object.create(h.prototype),_.prototype.constructor=_,x.prototype=Object.create(h.prototype),x.prototype.constructor=x,y.prototype=Object.create(h.prototype),y.prototype.constructor=y,M.prototype=Object.create(h.prototype),M.prototype.constructor=M,E.prototype=Object.create(h.prototype),E.prototype.constructor=E},180:function(t,e,n){"use strict";var r=n(157),o=n(181),l=n(171),c=n(178),h=n(176),d=n(161);function f(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}Object.assign(f.prototype,{computeGroups:function(t){for(var e,n=[],r=void 0,o=t.faces,i=0;i<o.length;i++){var l=o[i];l.materialIndex!==r&&(r=l.materialIndex,void 0!==e&&(e.count=3*i-e.start,n.push(e)),e={start:3*i,materialIndex:r})}void 0!==e&&(e.count=3*i-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,r=t.vertices,o=t.faceVertexUvs,l=o[0]&&o[0].length>0,c=o[1]&&o[1].length>0,h=t.morphTargets,f=h.length;if(f>0){e=[];for(var i=0;i<f;i++)e[i]={name:h[i].name,data:[]};this.morphTargets.position=e}var m,v=t.morphNormals,_=v.length;if(_>0){m=[];for(i=0;i<_;i++)m[i]={name:v[i].name,data:[]};this.morphTargets.normal=m}var x=t.skinIndices,y=t.skinWeights,M=x.length===r.length,E=y.length===r.length;r.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(i=0;i<n.length;i++){var w=n[i];this.vertices.push(r[w.a],r[w.b],r[w.c]);var T=w.vertexNormals;if(3===T.length)this.normals.push(T[0],T[1],T[2]);else{var S=w.normal;this.normals.push(S,S,S)}var L,A=w.vertexColors;if(3===A.length)this.colors.push(A[0],A[1],A[2]);else{var R=w.color;this.colors.push(R,R,R)}if(!0===l)void 0!==(L=o[0][i])?this.uvs.push(L[0],L[1],L[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",i),this.uvs.push(new d.a,new d.a,new d.a));if(!0===c)void 0!==(L=o[1][i])?this.uvs2.push(L[0],L[1],L[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",i),this.uvs2.push(new d.a,new d.a,new d.a));for(var P=0;P<f;P++){var C=h[P].vertices;e[P].data.push(C[w.a],C[w.b],C[w.c])}for(P=0;P<_;P++){var D=v[P].vertexNormals[i];m[P].data.push(D.a,D.b,D.c)}M&&this.skinIndices.push(x[w.a],x[w.b],x[w.c]),E&&this.skinWeights.push(y[w.a],y[w.b],y[w.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var m=n(170),v=n(163),_=n(165),x=n(162),y=n(200);n.d(e,"a",function(){return A});var M,E,w,T,S,L=1;function A(){Object.defineProperty(this,"id",{value:L+=2}),this.uuid=x.a.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}A.prototype=Object.assign(Object.create(l.a.prototype),{constructor:A,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(Object(y.a)(t)>65535?c.d:c.c)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):(this.attributes[t]=e,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(t,new c.a(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new _.a).getNormalMatrix(t).applyToBufferAttribute(n),n.needsUpdate=!0);var r=this.attributes.tangent;void 0!==r&&((new _.a).getNormalMatrix(t).applyToBufferAttribute(r),r.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:(S=new v.a,function(t){return S.makeRotationX(t),this.applyMatrix(S),this}),rotateY:function(){var t=new v.a;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new v.a;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new v.a;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new v.a;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:(T=new m.a,function(t){T.lookAt(t),T.updateMatrix(),this.applyMatrix(T.matrix)}),center:(w=new r.a,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(w).negate(),this.translate(w.x,w.y,w.z),this}),setFromObject:function(object){var t=object.geometry;if(object.isPoints||object.isLine){var e=new c.b(3*t.vertices.length,3),n=new c.b(3*t.colors.length,3);if(this.addAttribute("position",e.copyVector3sArray(t.vertices)),this.addAttribute("color",n.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var r=new c.b(t.lineDistances.length,1);this.addAttribute("lineDistance",r.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else object.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(t){for(var e=[],i=0,n=t.length;i<n;i++){var r=t[i];e.push(r.x,r.y,r.z||0)}return this.addAttribute("position",new c.b(e,3)),this},updateFromObject:function(object){var t,e=object.geometry;if(object.isMesh){var n=e.__directGeometry;if(!0===e.elementsNeedUpdate&&(n=void 0,e.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(e);n.verticesNeedUpdate=e.verticesNeedUpdate,n.normalsNeedUpdate=e.normalsNeedUpdate,n.colorsNeedUpdate=e.colorsNeedUpdate,n.uvsNeedUpdate=e.uvsNeedUpdate,n.groupsNeedUpdate=e.groupsNeedUpdate,e.verticesNeedUpdate=!1,e.normalsNeedUpdate=!1,e.colorsNeedUpdate=!1,e.uvsNeedUpdate=!1,e.groupsNeedUpdate=!1,e=n}return!0===e.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(e.vertices),t.needsUpdate=!0),e.verticesNeedUpdate=!1),!0===e.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(e.normals),t.needsUpdate=!0),e.normalsNeedUpdate=!1),!0===e.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(e.colors),t.needsUpdate=!0),e.colorsNeedUpdate=!1),e.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(e.uvs),t.needsUpdate=!0),e.uvsNeedUpdate=!1),e.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(e.lineDistances),t.needsUpdate=!0),e.lineDistancesNeedUpdate=!1),e.groupsNeedUpdate&&(e.computeGroups(object.geometry),this.groups=e.groups,e.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new f).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new c.a(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.addAttribute("normal",new c.a(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var r=new Float32Array(3*t.colors.length);this.addAttribute("color",new c.a(r,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var o=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new c.a(o,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var l=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new c.a(l,2).copyVector2sArray(t.uvs2))}for(var h in this.groups=t.groups,t.morphTargets){for(var d=[],f=t.morphTargets[h],i=0,m=f.length;i<m;i++){var v=f[i],_=new c.b(3*v.data.length,3);_.name=v.name,d.push(_.copyVector3sArray(v.data))}this.morphAttributes[h]=d}if(t.skinIndices.length>0){var x=new c.b(4*t.skinIndices.length,4);this.addAttribute("skinIndex",x.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var y=new c.b(4*t.skinWeights.length,4);this.addAttribute("skinWeight",y.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:(E=new o.a,function(){null===this.boundingBox&&(this.boundingBox=new o.a);var t=this.attributes.position,e=this.morphAttributes.position;if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(var i=0,n=e.length;i<n;i++){var r=e[i];E.setFromBufferAttribute(r),this.boundingBox.expandByPoint(E.min),this.boundingBox.expandByPoint(E.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}),computeBoundingSphere:function(){var t=new o.a,e=new o.a,n=new r.a;return function(){null===this.boundingSphere&&(this.boundingSphere=new h.a);var r=this.attributes.position,o=this.morphAttributes.position;if(r){var l=this.boundingSphere.center;if(t.setFromBufferAttribute(r),o)for(var i=0,c=o.length;i<c;i++){var d=o[i];e.setFromBufferAttribute(d),t.expandByPoint(e.min),t.expandByPoint(e.max)}t.getCenter(l);var f=0;for(i=0,c=r.count;i<c;i++)n.fromBufferAttribute(r,i),f=Math.max(f,l.distanceToSquared(n));if(o)for(i=0,c=o.length;i<c;i++)for(var m=0,v=(d=o[i]).count;m<v;m++)n.fromBufferAttribute(d,m),f=Math.max(f,l.distanceToSquared(n));this.boundingSphere.radius=Math.sqrt(f),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var n=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new c.a(new Float32Array(n.length),3));else for(var o=e.normal.array,i=0,l=o.length;i<l;i++)o[i]=0;var h,d,f,m=e.normal.array,v=new r.a,_=new r.a,x=new r.a,y=new r.a,M=new r.a;if(t){var E=t.array;for(i=0,l=t.count;i<l;i+=3)h=3*E[i+0],d=3*E[i+1],f=3*E[i+2],v.fromArray(n,h),_.fromArray(n,d),x.fromArray(n,f),y.subVectors(x,_),M.subVectors(v,_),y.cross(M),m[h]+=y.x,m[h+1]+=y.y,m[h+2]+=y.z,m[d]+=y.x,m[d+1]+=y.y,m[d+2]+=y.z,m[f]+=y.x,m[f+1]+=y.y,m[f+2]+=y.z}else for(i=0,l=n.length;i<l;i+=9)v.fromArray(n,i),_.fromArray(n,i+3),x.fromArray(n,i+6),y.subVectors(x,_),M.subVectors(v,_),y.cross(M),m[i]=y.x,m[i+1]=y.y,m[i+2]=y.z,m[i+3]=y.x,m[i+4]=y.y,m[i+5]=y.z,m[i+6]=y.x,m[i+7]=y.y,m[i+8]=y.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var r in n)if(void 0!==t.attributes[r])for(var o=n[r].array,l=t.attributes[r],c=l.array,h=l.itemSize*e,d=Math.min(c.length,o.length-h),i=0,f=h;i<d;i++,f++)o[f]=c[i];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:(M=new r.a,function(){for(var t=this.attributes.normal,i=0,e=t.count;i<e;i++)M.x=t.getX(i),M.y=t.getY(i),M.z=t.getZ(i),M.normalize(),t.setXYZ(i,M.x,M.y,M.z)}),toNonIndexed:function(){function t(t,e){for(var n=t.array,r=t.itemSize,o=new n.constructor(e.length*r),l=0,h=0,i=0,d=e.length;i<d;i++){l=e[i]*r;for(var f=0;f<r;f++)o[h++]=n[l++]}return new c.a(o,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new A,n=this.index.array,r=this.attributes;for(var o in r){var l=t(r[o],n);e.addAttribute(o,l)}var h=this.morphAttributes;for(o in h){for(var d=[],f=h[o],i=0,m=f.length;i<m;i++){l=t(f[i],n);d.push(l)}e.morphAttributes[o]=d}for(var v=this.groups,_=(i=0,v.length);i<_;i++){var x=v[i];e.addGroup(x.start,x.count,x.materialIndex)}return e},toJSON:function(){var data={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),Object.keys(this.userData).length>0&&(data.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var e in t)void 0!==t[e]&&(data[e]=t[e]);return data}data.data={attributes:{}};var n=this.index;null!==n&&(data.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});var r=this.attributes;for(var e in r){var o=(m=r[e]).toJSON();""!==m.name&&(o.name=m.name),data.data.attributes[e]=o}var l={},c=!1;for(var e in this.morphAttributes){for(var h=this.morphAttributes[e],d=[],i=0,f=h.length;i<f;i++){var m;o=(m=h[i]).toJSON();""!==m.name&&(o.name=m.name),d.push(o)}d.length>0&&(l[e]=d,c=!0)}c&&(data.data.morphAttributes=l);var v=this.groups;v.length>0&&(data.data.groups=JSON.parse(JSON.stringify(v)));var _=this.boundingSphere;return null!==_&&(data.data.boundingSphere={center:_.center.toArray(),radius:_.radius}),data},clone:function(){return(new A).copy(this)},copy:function(source){var t,i,e;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=source.name;var n=source.index;null!==n&&this.setIndex(n.clone());var r=source.attributes;for(t in r){var o=r[t];this.addAttribute(t,o.clone())}var l=source.morphAttributes;for(t in l){var c=[],h=l[t];for(i=0,e=h.length;i<e;i++)c.push(h[i].clone());this.morphAttributes[t]=c}var d=source.groups;for(i=0,e=d.length;i<e;i++){var f=d[i];this.addGroup(f.start,f.count,f.materialIndex)}var m=source.boundingBox;null!==m&&(this.boundingBox=m.clone());var v=source.boundingSphere;return null!==v&&(this.boundingSphere=v.clone()),this.drawRange.start=source.drawRange.start,this.drawRange.count=source.drawRange.count,this.userData=source.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}})},181:function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r,o,l,c=n(157);function h(t,e){this.min=void 0!==t?t:new c.a(1/0,1/0,1/0),this.max=void 0!==e?e:new c.a(-1/0,-1/0,-1/0)}Object.assign(h.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,r=1/0,o=-1/0,l=-1/0,c=-1/0,i=0,h=t.length;i<h;i+=3){var d=t[i],f=t[i+1],m=t[i+2];d<e&&(e=d),f<n&&(n=f),m<r&&(r=m),d>o&&(o=d),f>l&&(l=f),m>c&&(c=m)}return this.min.set(e,n,r),this.max.set(o,l,c),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,r=1/0,o=-1/0,l=-1/0,c=-1/0,i=0,h=t.count;i<h;i++){var d=t.getX(i),f=t.getY(i),m=t.getZ(i);d<e&&(e=d),f<n&&(n=f),m<r&&(r=m),d>o&&(o=d),f>l&&(l=f),m>c&&(c=m)}return this.min.set(e,n,r),this.max.set(o,l,c),this},setFromPoints:function(t){this.makeEmpty();for(var i=0,e=t.length;i<e;i++)this.expandByPoint(t[i]);return this},setFromCenterAndSize:(l=new c.a,function(t,e){var n=l.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}),setFromObject:function(object){return this.makeEmpty(),this.expandByObject(object)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new c.a),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new c.a),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,i,e,n=new c.a;function r(r){var o=r.geometry;if(void 0!==o)if(o.isGeometry){var l=o.vertices;for(i=0,e=l.length;i<e;i++)n.copy(l[i]),n.applyMatrix4(r.matrixWorld),t.expandByPoint(n)}else if(o.isBufferGeometry){var c=o.attributes.position;if(void 0!==c)for(i=0,e=c.count;i<e;i++)n.fromBufferAttribute(c,i).applyMatrix4(r.matrixWorld),t.expandByPoint(n)}}return function(object){return t=this,object.updateMatrixWorld(!0),object.traverse(r),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new c.a),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:(o=new c.a,function(t){return this.clampPoint(t.center,o),o.distanceToSquared(t.center)<=t.radius*t.radius}),intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant},intersectsTriangle:function(){var t=new c.a,e=new c.a,n=new c.a,r=new c.a,o=new c.a,l=new c.a,h=new c.a,d=new c.a,f=new c.a,m=new c.a;function v(r){var i,o;for(i=0,o=r.length-3;i<=o;i+=3){h.fromArray(r,i);var l=f.x*Math.abs(h.x)+f.y*Math.abs(h.y)+f.z*Math.abs(h.z),c=t.dot(h),d=e.dot(h),m=n.dot(h);if(Math.max(-Math.max(c,d,m),Math.min(c,d,m))>l)return!1}return!0}return function(c){if(this.isEmpty())return!1;this.getCenter(d),f.subVectors(this.max,d),t.subVectors(c.a,d),e.subVectors(c.b,d),n.subVectors(c.c,d),r.subVectors(e,t),o.subVectors(n,e),l.subVectors(t,n);var h=[0,-r.z,r.y,0,-o.z,o.y,0,-l.z,l.y,r.z,0,-r.x,o.z,0,-o.x,l.z,0,-l.x,-r.y,r.x,0,-o.y,o.x,0,-l.y,l.x,0];return!!v(h)&&(!!v(h=[1,0,0,0,1,0,0,0,1])&&(m.crossVectors(r,o),v(h=[m.x,m.y,m.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new c.a),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new c.a;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new c.a;return function(e){return void 0===e&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:(r=[new c.a,new c.a,new c.a,new c.a,new c.a,new c.a,new c.a,new c.a],function(t){return this.isEmpty()?this:(r[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),r[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),r[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),r[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),r[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),r[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),r[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),r[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(r),this)}),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}})},198:function(t,e,n){"use strict";n.d(e,"a",function(){return T});var r,o,l,c=n(171),h=n(199),d=n(165),f=n(176),m=n(181),v=n(157),_=n(163),x=n(161),y=n(166),M=n(170),E=n(162),w=0;function T(){Object.defineProperty(this,"id",{value:w+=2}),this.uuid=E.a.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}T.prototype=Object.assign(Object.create(c.a.prototype),{constructor:T,isGeometry:!0,applyMatrix:function(t){for(var e=(new d.a).getNormalMatrix(t),i=0,n=this.vertices.length;i<n;i++){this.vertices[i].applyMatrix4(t)}for(i=0,n=this.faces.length;i<n;i++){var r=this.faces[i];r.normal.applyMatrix3(e).normalize();for(var o=0,l=r.vertexNormals.length;o<l;o++)r.vertexNormals[o].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:(l=new _.a,function(t){return l.makeRotationX(t),this.applyMatrix(l),this}),rotateY:function(){var t=new _.a;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new _.a;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new _.a;return function(e,n,r){return t.makeTranslation(e,n,r),this.applyMatrix(t),this}}(),scale:function(){var t=new _.a;return function(e,n,r){return t.makeScale(e,n,r),this.applyMatrix(t),this}}(),lookAt:(o=new M.a,function(t){o.lookAt(t),o.updateMatrix(),this.applyMatrix(o.matrix)}),fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,r=t.attributes,o=r.position.array,l=void 0!==r.normal?r.normal.array:void 0,c=void 0!==r.color?r.color.array:void 0,d=void 0!==r.uv?r.uv.array:void 0,f=void 0!==r.uv2?r.uv2.array:void 0;void 0!==f&&(this.faceVertexUvs[1]=[]);for(var i=0;i<o.length;i+=3)e.vertices.push((new v.a).fromArray(o,i)),void 0!==c&&e.colors.push((new y.a).fromArray(c,i));function m(a,b,t,n){var r=void 0===c?[]:[e.colors[a].clone(),e.colors[b].clone(),e.colors[t].clone()],o=void 0===l?[]:[(new v.a).fromArray(l,3*a),(new v.a).fromArray(l,3*b),(new v.a).fromArray(l,3*t)],m=new h.a(a,b,t,o,r,n);e.faces.push(m),void 0!==d&&e.faceVertexUvs[0].push([(new x.a).fromArray(d,2*a),(new x.a).fromArray(d,2*b),(new x.a).fromArray(d,2*t)]),void 0!==f&&e.faceVertexUvs[1].push([(new x.a).fromArray(f,2*a),(new x.a).fromArray(f,2*b),(new x.a).fromArray(f,2*t)])}var _=t.groups;if(_.length>0)for(i=0;i<_.length;i++)for(var M=_[i],E=M.start,w=E,T=E+M.count;w<T;w+=3)void 0!==n?m(n[w],n[w+1],n[w+2],M.materialIndex):m(w,w+1,w+2,M.materialIndex);else if(void 0!==n)for(i=0;i<n.length;i+=3)m(n[i],n[i+1],n[i+2]);else for(i=0;i<o.length/3;i+=3)m(i,i+1,i+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:(r=new v.a,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(r).negate(),this.translate(r.x,r.y,r.z),this}),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,s=0===e?1:1/e,n=new _.a;return n.set(s,0,0,-s*t.x,0,s,0,-s*t.y,0,0,s,-s*t.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var t=new v.a,e=new v.a,n=0,r=this.faces.length;n<r;n++){var o=this.faces[n],l=this.vertices[o.a],c=this.vertices[o.b],h=this.vertices[o.c];t.subVectors(h,c),e.subVectors(l,c),t.cross(e),t.normalize(),o.normal.copy(t)}},computeVertexNormals:function(t){var e,n,r,o,l,c;for(void 0===t&&(t=!0),c=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)c[e]=new v.a;if(t){var h,d,f,m=new v.a,_=new v.a;for(r=0,o=this.faces.length;r<o;r++)l=this.faces[r],h=this.vertices[l.a],d=this.vertices[l.b],f=this.vertices[l.c],m.subVectors(f,d),_.subVectors(h,d),m.cross(_),c[l.a].add(m),c[l.b].add(m),c[l.c].add(m)}else for(this.computeFaceNormals(),r=0,o=this.faces.length;r<o;r++)c[(l=this.faces[r]).a].add(l.normal),c[l.b].add(l.normal),c[l.c].add(l.normal);for(e=0,n=this.vertices.length;e<n;e++)c[e].normalize();for(r=0,o=this.faces.length;r<o;r++){var x=(l=this.faces[r]).vertexNormals;3===x.length?(x[0].copy(c[l.a]),x[1].copy(c[l.b]),x[2].copy(c[l.c])):(x[0]=c[l.a].clone(),x[1]=c[l.b].clone(),x[2]=c[l.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var r=(n=this.faces[t]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var i,t,e,n,r;for(e=0,n=this.faces.length;e<n;e++)for((r=this.faces[e]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),i=0,t=r.vertexNormals.length;i<t;i++)r.__originalVertexNormals[i]?r.__originalVertexNormals[i].copy(r.vertexNormals[i]):r.__originalVertexNormals[i]=r.vertexNormals[i].clone();var o=new T;for(o.faces=this.faces,i=0,t=this.morphTargets.length;i<t;i++){if(!this.morphNormals[i]){this.morphNormals[i]={},this.morphNormals[i].faceNormals=[],this.morphNormals[i].vertexNormals=[];var l=this.morphNormals[i].faceNormals,c=this.morphNormals[i].vertexNormals;for(e=0,n=this.faces.length;e<n;e++)h=new v.a,d={a:new v.a,b:new v.a,c:new v.a},l.push(h),c.push(d)}var h,d,f=this.morphNormals[i];for(o.vertices=this.morphTargets[i].vertices,o.computeFaceNormals(),o.computeVertexNormals(),e=0,n=this.faces.length;e<n;e++)r=this.faces[e],h=f.faceNormals[e],d=f.vertexNormals[e],h.copy(r.normal),d.a.copy(r.vertexNormals[0]),d.b.copy(r.vertexNormals[1]),d.c.copy(r.vertexNormals[2])}for(e=0,n=this.faces.length;e<n;e++)(r=this.faces[e]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new m.a),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new f.a),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var r,o=this.vertices.length,l=this.vertices,c=t.vertices,f=this.faces,m=t.faces,v=this.faceVertexUvs[0],_=t.faceVertexUvs[0],x=this.colors,y=t.colors;void 0===n&&(n=0),void 0!==e&&(r=(new d.a).getNormalMatrix(e));for(var i=0,M=c.length;i<M;i++){var E=c[i].clone();void 0!==e&&E.applyMatrix4(e),l.push(E)}for(i=0,M=y.length;i<M;i++)x.push(y[i].clone());for(i=0,M=m.length;i<M;i++){var w,T,S,L=m[i],A=L.vertexNormals,R=L.vertexColors;(w=new h.a(L.a+o,L.b+o,L.c+o)).normal.copy(L.normal),void 0!==r&&w.normal.applyMatrix3(r).normalize();for(var P=0,C=A.length;P<C;P++)T=A[P].clone(),void 0!==r&&T.applyMatrix3(r).normalize(),w.vertexNormals.push(T);w.color.copy(L.color);for(P=0,C=R.length;P<C;P++)S=R[P],w.vertexColors.push(S.clone());w.materialIndex=L.materialIndex+n,f.push(w)}for(i=0,M=_.length;i<M;i++){var D=_[i],N=[];if(void 0!==D){for(P=0,C=D.length;P<C;P++)N.push(D[P].clone());v.push(N)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,i,n,r,o,l,c,h={},d=[],f=[],m=Math.pow(10,4);for(i=0,n=this.vertices.length;i<n;i++)t=this.vertices[i],void 0===h[e=Math.round(t.x*m)+"_"+Math.round(t.y*m)+"_"+Math.round(t.z*m)]?(h[e]=i,d.push(this.vertices[i]),f[i]=d.length-1):f[i]=f[h[e]];var v=[];for(i=0,n=this.faces.length;i<n;i++){(r=this.faces[i]).a=f[r.a],r.b=f[r.b],r.c=f[r.c],o=[r.a,r.b,r.c];for(var _=0;_<3;_++)if(o[_]===o[(_+1)%3]){v.push(i);break}}for(i=v.length-1;i>=0;i--){var x=v[i];for(this.faces.splice(x,1),l=0,c=this.faceVertexUvs.length;l<c;l++)this.faceVertexUvs[l].splice(x,1)}var y=this.vertices.length-d.length;return this.vertices=d,y},setFromPoints:function(t){this.vertices=[];for(var i=0,e=t.length;i<e;i++){var n=t[i];this.vertices.push(new v.a(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,i=0;i<e;i++)t[i]._id=i;t.sort(function(a,b){return a.materialIndex-b.materialIndex});var n,r,o=this.faceVertexUvs[0],l=this.faceVertexUvs[1];o&&o.length===e&&(n=[]),l&&l.length===e&&(r=[]);for(i=0;i<e;i++){var c=t[i]._id;n&&n.push(o[c]),r&&r.push(l[c])}n&&(this.faceVertexUvs[0]=n),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var data={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var e in t)void 0!==t[e]&&(data[e]=t[e]);return data}for(var n=[],i=0;i<this.vertices.length;i++){var r=this.vertices[i];n.push(r.x,r.y,r.z)}var o=[],l=[],c={},h=[],d={},f=[],m={};for(i=0;i<this.faces.length;i++){var v=this.faces[i],_=void 0!==this.faceVertexUvs[0][i],x=v.normal.length()>0,y=v.vertexNormals.length>0,M=1!==v.color.r||1!==v.color.g||1!==v.color.b,E=v.vertexColors.length>0,w=0;if(w=A(w,0,0),w=A(w,1,!0),w=A(w,2,!1),w=A(w,3,_),w=A(w,4,x),w=A(w,5,y),w=A(w,6,M),w=A(w,7,E),o.push(w),o.push(v.a,v.b,v.c),o.push(v.materialIndex),_){var T=this.faceVertexUvs[0][i];o.push(C(T[0]),C(T[1]),C(T[2]))}if(x&&o.push(R(v.normal)),y){var S=v.vertexNormals;o.push(R(S[0]),R(S[1]),R(S[2]))}if(M&&o.push(P(v.color)),E){var L=v.vertexColors;o.push(P(L[0]),P(L[1]),P(L[2]))}}function A(t,e,n){return n?t|1<<e:t&~(1<<e)}function R(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==c[e]?c[e]:(c[e]=l.length/3,l.push(t.x,t.y,t.z),c[e])}function P(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==d[e]?d[e]:(d[e]=h.length,h.push(t.getHex()),d[e])}function C(t){var e=t.x.toString()+t.y.toString();return void 0!==m[e]?m[e]:(m[e]=f.length/2,f.push(t.x,t.y),m[e])}return data.data={},data.data.vertices=n,data.data.normals=l,h.length>0&&(data.data.colors=h),f.length>0&&(data.data.uvs=[f]),data.data.faces=o,data},clone:function(){return(new T).copy(this)},copy:function(source){var i,t,e,n,r,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=source.name;var l=source.vertices;for(i=0,t=l.length;i<t;i++)this.vertices.push(l[i].clone());var c=source.colors;for(i=0,t=c.length;i<t;i++)this.colors.push(c[i].clone());var h=source.faces;for(i=0,t=h.length;i<t;i++)this.faces.push(h[i].clone());for(i=0,t=source.faceVertexUvs.length;i<t;i++){var d=source.faceVertexUvs[i];for(void 0===this.faceVertexUvs[i]&&(this.faceVertexUvs[i]=[]),e=0,n=d.length;e<n;e++){var f=d[e],m=[];for(r=0,o=f.length;r<o;r++){var v=f[r];m.push(v.clone())}this.faceVertexUvs[i].push(m)}}var _=source.morphTargets;for(i=0,t=_.length;i<t;i++){var x={};if(x.name=_[i].name,void 0!==_[i].vertices)for(x.vertices=[],e=0,n=_[i].vertices.length;e<n;e++)x.vertices.push(_[i].vertices[e].clone());if(void 0!==_[i].normals)for(x.normals=[],e=0,n=_[i].normals.length;e<n;e++)x.normals.push(_[i].normals[e].clone());this.morphTargets.push(x)}var y=source.morphNormals;for(i=0,t=y.length;i<t;i++){var M={};if(void 0!==y[i].vertexNormals)for(M.vertexNormals=[],e=0,n=y[i].vertexNormals.length;e<n;e++){var E=y[i].vertexNormals[e],w={};w.a=E.a.clone(),w.b=E.b.clone(),w.c=E.c.clone(),M.vertexNormals.push(w)}if(void 0!==y[i].faceNormals)for(M.faceNormals=[],e=0,n=y[i].faceNormals.length;e<n;e++)M.faceNormals.push(y[i].faceNormals[e].clone());this.morphNormals.push(M)}var T=source.skinWeights;for(i=0,t=T.length;i<t;i++)this.skinWeights.push(T[i].clone());var S=source.skinIndices;for(i=0,t=S.length;i<t;i++)this.skinIndices.push(S[i].clone());var L=source.lineDistances;for(i=0,t=L.length;i<t;i++)this.lineDistances.push(L[i]);var A=source.boundingBox;null!==A&&(this.boundingBox=A.clone());var R=source.boundingSphere;return null!==R&&(this.boundingSphere=R.clone()),this.elementsNeedUpdate=source.elementsNeedUpdate,this.verticesNeedUpdate=source.verticesNeedUpdate,this.uvsNeedUpdate=source.uvsNeedUpdate,this.normalsNeedUpdate=source.normalsNeedUpdate,this.colorsNeedUpdate=source.colorsNeedUpdate,this.lineDistancesNeedUpdate=source.lineDistancesNeedUpdate,this.groupsNeedUpdate=source.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}})},199:function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r=n(166),o=n(157);function l(a,b,t,e,n,l){this.a=a,this.b=b,this.c=t,this.normal=e&&e.isVector3?e:new o.a,this.vertexNormals=Array.isArray(e)?e:[],this.color=n&&n.isColor?n:new r.a,this.vertexColors=Array.isArray(n)?n:[],this.materialIndex=void 0!==l?l:0}Object.assign(l.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.a=source.a,this.b=source.b,this.c=source.c,this.normal.copy(source.normal),this.color.copy(source.color),this.materialIndex=source.materialIndex;for(var i=0,t=source.vertexNormals.length;i<t;i++)this.vertexNormals[i]=source.vertexNormals[i].clone();for(i=0,t=source.vertexColors.length;i<t;i++)this.vertexColors[i]=source.vertexColors[i].clone();return this}})},200:function(t,e,n){"use strict";function r(t){if(0===t.length)return-1/0;for(var e=t[0],i=1,n=t.length;i<n;++i)t[i]>e&&(e=t[i]);return e}n.d(e,"a",function(){return r})}}]);